{
    "sourceFile": "Backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1680540716928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681505880328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,14 @@\n \r\n \r\n             const connection = await oracledb.getConnection({\r\n \r\n-                user: \"manuel.nunez\",\r\n+                user: \"manuel.nunez\", \r\n                 password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n-            const result = await connection.execute('SELECT * FROM AHS_POST_2015')\r\n+            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) FROM AHS_POST_2015 GROUP BY YEAR ORDER BY YEAR ASC')\r\n             return result;\r\n \r\n         } catch (error) {\r\n \r\n"
                },
                {
                    "date": 1681506661295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,12 @@\n app.get('/students', (req, res) => {\r\n \r\n     async function fetchDataStudents() {\r\n \r\n-        try {\r\n+        try {}\r\n \r\n-            oracledb.initOracleClient({libDir: 'C:\\\\oracle\\\\instantclient_21_9'});\r\n \r\n \r\n-\r\n             const connection = await oracledb.getConnection({\r\n \r\n                 user: \"manuel.nunez\", \r\n                 password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n"
                },
                {
                    "date": 1681508203272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,20 +16,18 @@\n app.get('/students', (req, res) => {\r\n \r\n     async function fetchDataStudents() {\r\n \r\n-        try {}\r\n+        try {\r\n \r\n-\r\n-\r\n             const connection = await oracledb.getConnection({\r\n \r\n                 user: \"manuel.nunez\", \r\n                 password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n-            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) FROM AHS_POST_2015 GROUP BY YEAR ORDER BY YEAR ASC')\r\n+            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) AS Dishwashers FROM AHS_POST_2015 GROUP BY YEAR ORDER BY YEAR ASC')\r\n             return result;\r\n \r\n         } catch (error) {\r\n \r\n"
                },
                {
                    "date": 1681757299395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n                 password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n-            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) AS Dishwashers FROM AHS_POST_2015 GROUP BY YEAR ORDER BY YEAR ASC')\r\n+            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) AS Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC')\r\n             return result;\r\n \r\n         } catch (error) {\r\n \r\n"
                },
                {
                    "date": 1681763698118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n                 password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n-            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) AS Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC')\r\n+            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) AS Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC', [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n             return result;\r\n \r\n         } catch (error) {\r\n \r\n"
                },
                {
                    "date": 1681764564613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,15 +5,8 @@\n const app = express();\r\n \r\n app.use(cors());\r\n \r\n-\r\n-app.get(\"/api\", (req, res) => {\r\n-\r\n-    res.send('Hello, World!')\r\n-\r\n-})\r\n-\r\n app.get('/students', (req, res) => {\r\n \r\n     async function fetchDataStudents() {\r\n \r\n@@ -50,11 +43,5 @@\n         })\r\n \r\n })\r\n \r\n-app.get('/message', (req,res) => {\r\n-\r\n-    res.json({message: \"Hello from server!\"})\r\n-\r\n-})\r\n-\r\n app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n"
                },
                {
                    "date": 1681770783364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,5 +43,5 @@\n         })\r\n \r\n })\r\n \r\n-app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n+app.listen(8080, () => { console.log(\"Server started on port 8080\") })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681775101613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,5 +43,5 @@\n         })\r\n \r\n })\r\n \r\n-app.listen(8080, () => { console.log(\"Server started on port 8080\") })\n\\ No newline at end of file\n+app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n"
                },
                {
                    "date": 1681775300880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,4 +44,193 @@\n \r\n })\r\n \r\n app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n+\r\n+function MetroAreasQueries(x, y, z, h, stat){\r\n+\r\n+    return ('select Vals_yearA.year, Vals_yearA.V1, Vals_yearB.V2, nat_indicators.'+y+' as Indicator'\r\n+            + 'from' \r\n+            + '('\r\n+            + 'select YEAR as year, TRUNC(AVG('+x+'),1) as V1' \r\n+            + 'from AHS'\r\n+            + 'Where omb13cbsa = \\'\\'\\''+z+'\\'\\'\\''\r\n+            + 'GROUP BY YEAR'\r\n+            + 'ORDER BY YEAR ASC'\r\n+            + ') Vals_yearA'\r\n+            + 'JOIN' \r\n+            + 'NAT_INDICATORS on Vals_yearA.year = NAT_INDICATORS.YEAR'\r\n+            + 'JOIN'\r\n+            + '('\r\n+            + 'select YEAR as year, TRUNC(AVG('+x+'),1) as V2' \r\n+            + 'from AHS'\r\n+            + 'Where omb13cbsa = \\'\\'\\''+h+'\\'\\'\\''\r\n+            + 'GROUP BY YEAR'\r\n+            + 'ORDER BY YEAR ASC'\r\n+            + ') Vals_yearB'\r\n+            + 'on  Vals_yearB.year = NAT_INDICATORS.YEAR;')\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+function metro(message){\r\n+\r\n+if(message == 'New York, NY'){\r\n+    return '\\'35620\\''\r\n+}\r\n+if(message == 'Los Angeles, CA'){\r\n+    return '\\'31080\\''\r\n+}\r\n+if(message == 'Chicago, IL'){\r\n+    return '\\'16980\\''\r\n+}\r\n+if(message == 'Philadelphia, PA'){\r\n+    return '\\'19100\\''\r\n+}\r\n+if(message == 'Huston, TX'){\r\n+    return '\\'37980\\''\r\n+}\r\n+if(message == 'Washington, DC'){\r\n+    return '\\'26420\\''\r\n+}\r\n+if(message == 'Miami, FL'){\r\n+    return '\\'47900\\''\r\n+}\r\n+if(message == 'Atlanta, GA'){\r\n+    return '\\'33100\\''\r\n+}\r\n+if(message == 'New York, NY'){\r\n+    return '\\'12060\\''\r\n+}\r\n+if(message == 'Boston, MA'){\r\n+    return '\\'14460\\''\r\n+}\r\n+if(message == 'San Francisco, CA'){\r\n+    return '\\'41860\\''\r\n+}\r\n+if(message == 'Detroit, MI'){\r\n+    return '\\'19820\\''\r\n+}\r\n+if(message == 'Phoenix, AZ'){\r\n+    return '\\'38060\\''\r\n+}\r\n+if(message == 'Seattle, WA'){\r\n+    return '\\'35620\\''\r\n+}\r\n+if(message == 'Riverside, CA'){\r\n+    return '\\'42660\\''\r\n+}\r\n+else{\r\n+    return '\\'35620\\''\r\n+}\r\n+\r\n+}\r\n+\r\n+function metroIndicator(message){\r\n+\r\n+if(message == 'Dish Washers'){\r\n+    return 'DISHWASH'\r\n+}\r\n+if(message == 'Garages'){\r\n+    return 'GARAGE'\r\n+}\r\n+if(message == 'Washing Machines'){\r\n+    return 'WASHER'\r\n+}\r\n+if(message == 'Porch'){\r\n+    return 'PORCH'\r\n+}\r\n+if(message == 'Kitchen Sink'){\r\n+    return 'KITCHSINK'\r\n+}\r\n+if(message == 'Household Rating'){\r\n+    return 'RATINGHS'\r\n+}\r\n+if(message == 'Neighborhood Rating'){\r\n+    return 'RATINGNH'\r\n+}\r\n+if(message == 'Family Income'){\r\n+    return 'FINCP'\r\n+}\r\n+if(message == 'Resident\\'s Income'){\r\n+    return 'HINCP'\r\n+}\r\n+if(message == 'Resident\\'s Sex'){\r\n+    return 'HHSEX'\r\n+}\r\n+if(message == 'Resident\\'s Marriage Status'){\r\n+    return 'HHMAR'\r\n+}\r\n+if(message == 'Resident\\'s Education Level'){\r\n+    return 'HHGRAD'\r\n+}\r\n+if(message == 'Resident\\'s Age'){\r\n+    return 'HHAGE'\r\n+}\r\n+if(message == 'Property Value'){\r\n+    return 'MARKETVAL'\r\n+}\r\n+if(message == 'Monthly Mortgage'){\r\n+    return 'MORTAMT'\r\n+}\r\n+if(message == 'Monthly Rent'){\r\n+    return 'RENT'\r\n+}\r\n+if(message == 'Year Built'){\r\n+    return 'YRBUILT'\r\n+}\r\n+if(message == 'Unit Size'){\r\n+    return 'UNITSIZE'\r\n+}\r\n+if(message == 'No Access To Water'){\r\n+    return 'NOWAT'\r\n+}\r\n+if(message == 'Monthly Home Expenses'){\r\n+    return 'TOTHCAMT'\r\n+}\r\n+if(message == 'Total Rooms'){\r\n+    return 'TOTROOM'\r\n+}\r\n+if(message == 'Rent Control Present'){\r\n+    return 'RENTCNTRL'\r\n+}\r\n+if(message == 'Number of Inhabitants'){\r\n+    return 'NUMPEOPLE'\r\n+}\r\n+else{\r\n+    return 'RENT'\r\n+}\r\n+\r\n+}\r\n+\r\n+\r\n+\r\n+function natIndicator(message){\r\n+\r\n+if(message == 'Inflation Rate'){\r\n+    return 'INFLATION'\r\n+}\r\n+if(message == 'CCI'){\r\n+    return 'CCI'\r\n+}\r\n+if(message == 'Federal Intrest Rate'){\r\n+    return 'INTRATE'\r\n+}\r\n+if(message == 'GDP'){\r\n+    return 'GDP'\r\n+}\r\n+if(message == 'Employment Rate'){\r\n+    return 'EMPRATE'\r\n+}\r\n+if(message == 'Bond Yield'){\r\n+    return 'BONDYIELD'\r\n+}\r\n+else{\r\n+    return 'INFLATION'\r\n+}\r\n+\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1680540716928,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst oracledb = require('oracledb');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\n\r\napp.use(cors());\r\n\r\n\r\napp.get(\"/api\", (req, res) => {\r\n\r\n    res.send('Hello, World!')\r\n\r\n})\r\n\r\napp.get('/students', (req, res) => {\r\n\r\n    async function fetchDataStudents() {\r\n\r\n        try {\r\n\r\n            oracledb.initOracleClient({libDir: 'C:\\\\oracle\\\\instantclient_21_9'});\r\n\r\n\r\n\r\n            const connection = await oracledb.getConnection({\r\n\r\n                user: \"manuel.nunez\",\r\n                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n            })\r\n\r\n            const result = await connection.execute('SELECT * FROM AHS_POST_2015')\r\n            return result;\r\n\r\n        } catch (error) {\r\n\r\n            console.error(error);\r\n            return error;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    fetchDataStudents().then(dbRes => {\r\n\r\n        res.send(dbRes)\r\n\r\n    })\r\n        .catch(error => {\r\n\r\n            res.send(\"bru\")\r\n\r\n        })\r\n\r\n})\r\n\r\napp.get('/message', (req,res) => {\r\n\r\n    res.json({message: \"Hello from server!\"})\r\n\r\n})\r\n\r\napp.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n"
        }
    ]
}