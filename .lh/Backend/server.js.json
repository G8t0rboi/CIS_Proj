{
    "sourceFile": "Backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1680540716928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681505880328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,14 @@\n \r\n \r\n             const connection = await oracledb.getConnection({\r\n \r\n-                user: \"manuel.nunez\",\r\n+                user: \"manuel.nunez\", \r\n                 password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n-            const result = await connection.execute('SELECT * FROM AHS_POST_2015')\r\n+            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) FROM AHS_POST_2015 GROUP BY YEAR ORDER BY YEAR ASC')\r\n             return result;\r\n \r\n         } catch (error) {\r\n \r\n"
                },
                {
                    "date": 1681506661295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,12 @@\n app.get('/students', (req, res) => {\r\n \r\n     async function fetchDataStudents() {\r\n \r\n-        try {\r\n+        try {}\r\n \r\n-            oracledb.initOracleClient({libDir: 'C:\\\\oracle\\\\instantclient_21_9'});\r\n \r\n \r\n-\r\n             const connection = await oracledb.getConnection({\r\n \r\n                 user: \"manuel.nunez\", \r\n                 password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n"
                },
                {
                    "date": 1681508203272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,20 +16,18 @@\n app.get('/students', (req, res) => {\r\n \r\n     async function fetchDataStudents() {\r\n \r\n-        try {}\r\n+        try {\r\n \r\n-\r\n-\r\n             const connection = await oracledb.getConnection({\r\n \r\n                 user: \"manuel.nunez\", \r\n                 password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n-            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) FROM AHS_POST_2015 GROUP BY YEAR ORDER BY YEAR ASC')\r\n+            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) AS Dishwashers FROM AHS_POST_2015 GROUP BY YEAR ORDER BY YEAR ASC')\r\n             return result;\r\n \r\n         } catch (error) {\r\n \r\n"
                },
                {
                    "date": 1681839460393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,29 +5,72 @@\n const app = express();\r\n \r\n app.use(cors());\r\n \r\n+app.get('/testPage', (req, res) => {\r\n \r\n-app.get(\"/api\", (req, res) => {\r\n+    const x = req.query.X\r\n+    const statement = 'SELECT YEAR, AVG(' + x + ') Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC'\r\n+    console.log(statement)\r\n \r\n-    res.send('Hello, World!')\r\n+    async function fetchData() {\r\n \r\n+        try {\r\n+\r\n+            const connection = await oracledb.getConnection({\r\n+\r\n+                user: \"manuel.nunez\",\r\n+                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n+                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n+            })\r\n+\r\n+            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n+            return result;\r\n+\r\n+        } catch (error) {\r\n+\r\n+            console.error(error);\r\n+            return error;\r\n+\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    fetchData().then(dbRes => {\r\n+\r\n+        res.send(dbRes)\r\n+\r\n+    })\r\n+        .catch(error => {\r\n+\r\n+            res.send(\"bru\")\r\n+\r\n+        })\r\n+\r\n })\r\n \r\n-app.get('/students', (req, res) => {\r\n+app.get('/MetroAreas', (req, res) => {\r\n+    const X = req.query.X\r\n+    const Y = req.query.Y\r\n+    const Z = req.query.Z\r\n+    const H = req.query.H\r\n+    const statistic = req.query.statistic\r\n \r\n-    async function fetchDataStudents() {\r\n+    const statement = MetroAreasQueries(X, Y, Z, H, statistic)\r\n+    console.log(statement)\r\n \r\n+    async function fetchData() {\r\n+ \r\n         try {\r\n \r\n             const connection = await oracledb.getConnection({\r\n \r\n-                user: \"manuel.nunez\", \r\n+                user: \"manuel.nunez\",\r\n                 password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n-            const result = await connection.execute('SELECT YEAR, AVG(DISHWASH) AS Dishwashers FROM AHS_POST_2015 GROUP BY YEAR ORDER BY YEAR ASC')\r\n+            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n             return result;\r\n \r\n         } catch (error) {\r\n \r\n@@ -37,9 +80,9 @@\n         }\r\n \r\n     }\r\n \r\n-    fetchDataStudents().then(dbRes => {\r\n+    fetchData().then(dbRes => {\r\n \r\n         res.send(dbRes)\r\n \r\n     })\r\n@@ -50,11 +93,357 @@\n         })\r\n \r\n })\r\n \r\n-app.get('/message', (req,res) => {\r\n+app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n \r\n-    res.json({message: \"Hello from server!\"})\r\n \r\n-})\r\n \r\n-app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n+function MetroAreasQueries(x, y, z, h, stat) {\r\n+\r\n+    if (stat == 'Average') {\r\n+\r\n+        return ('select Vals_yearA.year, Vals_yearA.V1, Vals_yearB.V2, nat_indicators.' + y + ' as Indicator '\r\n+            + 'from '\r\n+            + '( '\r\n+            + 'select YEAR as year, TRUNC(AVG(' + x + '),1) as V1 '\r\n+            + 'from AHS '\r\n+            + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+            + 'GROUP BY YEAR '\r\n+            + 'ORDER BY YEAR ASC '\r\n+            + ') Vals_yearA '\r\n+            + 'JOIN '\r\n+            + 'NAT_INDICATORS on Vals_yearA.year = NAT_INDICATORS.YEAR '\r\n+            + 'JOIN '\r\n+            + '( '\r\n+            + 'select YEAR as year, TRUNC(AVG(' + x + '),1) as V2 '\r\n+            + 'from AHS '\r\n+            + 'Where omb13cbsa = \\'\\'\\'' + h + '\\'\\'\\' '\r\n+            + 'GROUP BY YEAR '\r\n+            + 'ORDER BY YEAR ASC '\r\n+            + ') Vals_yearB '\r\n+            + 'on  Vals_yearB.year = NAT_INDICATORS.YEAR')\r\n+    }\r\n+    else if (stat = 'Median') {\r\n+        return ('WITH T(Year, Code, Att) AS '\r\n+            + '( '\r\n+            + 'SELECT YEAR, OMB13CBSA, ' + x + ' '\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL and (OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' or OMB13CBSA =  \\'\\'\\'' + h + '\\'\\'\\') '\r\n+            + ') '\r\n+            + 'SELECT M1.YEAR, M1.V1, M2.V2, NAT_INDICATORS.' + y + ' as Indicator '\r\n+            + 'FROM '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Att) AS V1 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M1 '\r\n+            + 'JOIN '\r\n+            + 'NAT_INDICATORS ON M1.YEAR = NAT_INDICATORS.YEAR '\r\n+            + 'JOIN '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Att) AS V2 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M2 '\r\n+            + 'ON M2.YEAR = NAT_INDICATORS.YEAR')\r\n+    }\r\n+    else if (stat = 'Upper Quartile') {\r\n+        return ('WITH T(Year, Code, Att) A '\r\n+            + '( '\r\n+            + 'SELECT YEAR, OMB13CBSA, ' + x\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL and (OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' or OMB13CBSA =  \\'\\'\\'' + h + '\\'\\'\\') '\r\n+            + ') '\r\n+            + 'SELECT M1.YEAR, M1.V1, M2.V2, NAT_INDICATORS.' + y + ' as Indicator '\r\n+            + 'FROM '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY Att) AS V1 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M1 '\r\n+            + 'JOIN '\r\n+            + 'NAT_INDICATORS ON M1.YEAR = NAT_INDICATORS.YEAR '\r\n+            + 'JOIN '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY Att) AS V2 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M2 '\r\n+            + 'ON M2.YEAR = NAT_INDICATORS.YEAR')\r\n+\r\n+    }\r\n+    else if (stat = 'Lower Quartile') {\r\n+        return ('WITH T(Year, Code, Att) AS '\r\n+            + '( '\r\n+            + 'SELECT YEAR, OMB13CBSA, ' + x\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL and (OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' or OMB13CBSA =  \\'\\'\\'' + h + '\\'\\'\\') '\r\n+            + ') '\r\n+            + 'SELECT M1.YEAR, M1.V1, M2.V2, NAT_INDICATORS.' + y + ' as Indicator '\r\n+            + 'FROM '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY Att) AS V1 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M1 '\r\n+            + 'JOIN '\r\n+            + 'NAT_INDICATORS ON M1.YEAR = NAT_INDICATORS.YEAR '\r\n+            + 'JOIN '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY Att) AS V2 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M2 '\r\n+            + 'ON M2.YEAR = NAT_INDICATORS.YEAR ; ')\r\n+    }\r\n+}\r\n+\r\n+\r\n+function localFactorsQueries(x, y, z) {\r\n+    return (\r\n+        +'select Vals_yearA.year, Vals_yearA.V1, Vals_yearB.V2 '\r\n+        + 'from '\r\n+        + '( '\r\n+        + 'select YEAR as year, TRUNC(AVG(' + x + '),2) as V1 '\r\n+        + 'from AHS '\r\n+        + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+        + 'GROUP BY YEAR '\r\n+        + 'ORDER BY YEAR ASC '\r\n+        + ') Vals_yearA '\r\n+        + 'JOIN '\r\n+        + '( '\r\n+        + 'select YEAR as year, TRUNC(AVG(' + y + '),2) as V2 '\r\n+        + 'from AHS '\r\n+        + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+        + 'GROUP BY YEAR '\r\n+        + 'ORDER BY YEAR ASC '\r\n+        + ') Vals_yearB '\r\n+        + 'on  Vals_yearB.year = Vals_yearA.year; '\r\n+    )\r\n+}\r\n+\r\n+\r\n+\r\n+function pieChartsQueries(x, z, y, type) {\r\n+    if (type == 'categorical') {\r\n+        + 'SELECT cats.Category, TRUNC((cats.V1/total.V2),3) as PERCENTAGE '\r\n+            + 'FROM '\r\n+            + '(SELECT ' + x + ' as Category, COUNT(X) AS V1 '\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n+            + 'GROUP BY ' + x + ' '\r\n+            + ') cats '\r\n+            + ', '\r\n+            + '(SELECT COUNT(' + x + ') AS V2 '\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n+            + ') total; '\r\n+\r\n+    }\r\n+    else if (type = 'numerical') {\r\n+        + 'With maxs(r) as '\r\n+            + '(Select unique max(' + x + ') from AHS) '\r\n+            + 'SELECT Ranges, TRUNC((cats.X/total.Y),3) as PERCENTAGE '\r\n+            + 'from '\r\n+            + '(select '\r\n+            + '(case '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*0  and ' + x + ' < (maxs.r/6)*1   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*1,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*1  and ' + x + ' < (maxs.r/6)*2   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*2,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*2  and ' + x + ' < (maxs.r/6)*3   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*3,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*3  and ' + x + ' < (maxs.r/6)*4   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*4,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*4  and ' + x + ' < (maxs.r/6)*5   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*5  then CONCAT( \\' X > \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) )'\r\n+            + 'end '\r\n+            + ') as Ranges, '\r\n+            + 'COUNT(CONTROL) as X '\r\n+            + 'from '\r\n+            + 'AHS, maxs '\r\n+            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n+            + 'GROUP BY '\r\n+            + '(case '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*0  and ' + x + ' < (maxs.r/6)*1   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*1,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*1  and ' + x + ' < (maxs.r/6)*2   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*2,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*2  and ' + x + ' < (maxs.r/6)*3   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*3,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*3  and ' + x + ' < (maxs.r/6)*4   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*4,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*4  and ' + x + ' < (maxs.r/6)*5   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*5  then CONCAT( \\' X > \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) ) '\r\n+            + 'end '\r\n+            + ') '\r\n+            + ') cats '\r\n+            + ', '\r\n+            + '(SELECT COUNT(' + x + ') AS Y '\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n+            + ') total; '\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+function metro(message) {\r\n+\r\n+    if (message == 'New York, NY') {\r\n+        return '\\'35620\\''\r\n+    }\r\n+    if (message == 'Los Angeles, CA') {\r\n+        return '\\'31080\\''\r\n+    }\r\n+    if (message == 'Chicago, IL') {\r\n+        return '\\'16980\\''\r\n+    }\r\n+    if (message == 'Philadelphia, PA') {\r\n+        return '\\'19100\\''\r\n+    }\r\n+    if (message == 'Huston, TX') {\r\n+        return '\\'37980\\''\r\n+    }\r\n+    if (message == 'Washington, DC') {\r\n+        return '\\'26420\\''\r\n+    }\r\n+    if (message == 'Miami, FL') {\r\n+        return '\\'47900\\''\r\n+    }\r\n+    if (message == 'Atlanta, GA') {\r\n+        return '\\'33100\\''\r\n+    }\r\n+    if (message == 'New York, NY') {\r\n+        return '\\'12060\\''\r\n+    }\r\n+    if (message == 'Boston, MA') {\r\n+        return '\\'14460\\''\r\n+    }\r\n+    if (message == 'San Francisco, CA') {\r\n+        return '\\'41860\\''\r\n+    }\r\n+    if (message == 'Detroit, MI') {\r\n+        return '\\'19820\\''\r\n+    }\r\n+    if (message == 'Phoenix, AZ') {\r\n+        return '\\'38060\\''\r\n+    }\r\n+    if (message == 'Seattle, WA') {\r\n+        return '\\'35620\\''\r\n+    }\r\n+    if (message == 'Riverside, CA') {\r\n+        return '\\'42660\\''\r\n+    }\r\n+    else {\r\n+        return '\\'35620\\''\r\n+    }\r\n+\r\n+}\r\n+\r\n+function metroIndicator(message) {\r\n+\r\n+    if (message == 'Dish Washers') {\r\n+        return 'DISHWASH'\r\n+    }\r\n+    if (message == 'Garages') {\r\n+        return 'GARAGE'\r\n+    }\r\n+    if (message == 'Washing Machines') {\r\n+        return 'WASHER'\r\n+    }\r\n+    if (message == 'Porch') {\r\n+        return 'PORCH'\r\n+    }\r\n+    if (message == 'Kitchen Sink') {\r\n+        return 'KITCHSINK'\r\n+    }\r\n+    if (message == 'Household Rating') {\r\n+        return 'RATINGHS'\r\n+    }\r\n+    if (message == 'Neighborhood Rating') {\r\n+        return 'RATINGNH'\r\n+    }\r\n+    if (message == 'Family Income') {\r\n+        return 'FINCP'\r\n+    }\r\n+    if (message == 'Resident\\'s Income') {\r\n+        return 'HINCP'\r\n+    }\r\n+    if (message == 'Resident\\'s Sex') {\r\n+        return 'HHSEX'\r\n+    }\r\n+    if (message == 'Resident\\'s Marriage Status') {\r\n+        return 'HHMAR'\r\n+    }\r\n+    if (message == 'Resident\\'s Education Level') {\r\n+        return 'HHGRAD'\r\n+    }\r\n+    if (message == 'Resident\\'s Age') {\r\n+        return 'HHAGE'\r\n+    }\r\n+    if (message == 'Property Value') {\r\n+        return 'MARKETVAL'\r\n+    }\r\n+    if (message == 'Monthly Mortgage') {\r\n+        return 'MORTAMT'\r\n+    }\r\n+    if (message == 'Monthly Rent') {\r\n+        return 'RENT'\r\n+    }\r\n+    if (message == 'Year Built') {\r\n+        return 'YRBUILT'\r\n+    }\r\n+    if (message == 'Unit Size') {\r\n+        return 'UNITSIZE'\r\n+    }\r\n+    if (message == 'No Access To Water') {\r\n+        return 'NOWAT'\r\n+    }\r\n+    if (message == 'Monthly Home Expenses') {\r\n+        return 'TOTHCAMT'\r\n+    }\r\n+    if (message == 'Total Rooms') {\r\n+        return 'TOTROOM'\r\n+    }\r\n+    if (message == 'Rent Control Present') {\r\n+        return 'RENTCNTRL'\r\n+    }\r\n+    if (message == 'Number of Inhabitants') {\r\n+        return 'NUMPEOPLE'\r\n+    }\r\n+    else {\r\n+        return 'RENT'\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+\r\n+function natIndicator(message) {\r\n+\r\n+    if (message == 'Inflation Rate') {\r\n+        return 'INFLATION'\r\n+    }\r\n+    if (message == 'CCI') {\r\n+        return 'CCI'\r\n+    }\r\n+    if (message == 'Federal Intrest Rate') {\r\n+        return 'INTRATE'\r\n+    }\r\n+    if (message == 'GDP') {\r\n+        return 'GDP'\r\n+    }\r\n+    if (message == 'Employment Rate') {\r\n+        return 'EMPRATE'\r\n+    }\r\n+    if (message == 'Bond Yield') {\r\n+        return 'BONDYIELD'\r\n+    }\r\n+    else {\r\n+        return 'INFLATION'\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681841048242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,10 @@\n             res.send(\"bru\")\r\n \r\n         })\r\n \r\n+        res.end;\r\n+\r\n })\r\n \r\n app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n \r\n"
                },
                {
                    "date": 1681851977410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n \r\n app.get('/testPage', (req, res) => {\r\n \r\n     const x = req.query.X\r\n-    const statement = 'SELECT YEAR, AVG(' + x + ') Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC'\r\n+    //const statement = 'SELECT YEAR, AVG(' + x + ') Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC'\r\n+    const statement = 'ALTER PROFILE <profile name> LIMIT SESSIONS_PER_USER UNLIMITED'\r\n     console.log(statement)\r\n \r\n     async function fetchData() {\r\n \r\n@@ -95,12 +96,117 @@\n         res.end;\r\n \r\n })\r\n \r\n+\r\n+\r\n+\r\n+\r\n+app.get('/Distributions', (req, res) => {\r\n+    const X = req.query.X\r\n+    const Y = req.query.Y\r\n+    const Z = req.query.Z\r\n+    const Type = req.query.type\r\n+\r\n+    console.log(X)\r\n+    console.log(Y)\r\n+    console.log(Z)\r\n+    console.log(Type)\r\n+\r\n+    const statement = pieChartsQueries(X, Z, Y, Type)\r\n+    console.log(statement)\r\n+\r\n+    async function fetchData() {\r\n+ \r\n+        try {\r\n+\r\n+            const connection = await oracledb.getConnection({\r\n+\r\n+                user: \"manuel.nunez\",\r\n+                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n+                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n+            })\r\n+\r\n+            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n+            return result;\r\n+\r\n+        } catch (error) {\r\n+\r\n+            console.error(error);\r\n+            return error;\r\n+\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    fetchData().then(dbRes => {\r\n+\r\n+        res.send(dbRes)\r\n+\r\n+    })\r\n+        .catch(error => {\r\n+\r\n+            res.send(\"bru\")\r\n+\r\n+        })\r\n+\r\n+})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+app.get('/LocalFactors', (req, res) => {\r\n+    const X = req.query.X\r\n+    const Y = req.query.Y\r\n+    const Z = req.query.Z\r\n+\r\n+    console.log(X)\r\n+    console.log(Y)\r\n+    console.log(Z)\r\n+\r\n+    const statement = localFactorsQueries(X, Y, Z)\r\n+    console.log(statement)\r\n+\r\n+    async function fetchData() {\r\n+ \r\n+        try {\r\n+\r\n+            const connection = await oracledb.getConnection({\r\n+\r\n+                user: \"manuel.nunez\",\r\n+                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n+                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n+            })\r\n+\r\n+            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n+            return result;\r\n+\r\n+        } catch (error) {\r\n+\r\n+            console.error(error);\r\n+            return error;\r\n+\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    fetchData().then(dbRes => {\r\n+\r\n+        res.send(dbRes)\r\n+\r\n+    })\r\n+        .catch(error => {\r\n+\r\n+            res.send(\"bru\")\r\n+\r\n+        })\r\n+\r\n+})\r\n+\r\n app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n \r\n \r\n-\r\n function MetroAreasQueries(x, y, z, h, stat) {\r\n \r\n     if (stat == 'Average') {\r\n \r\n@@ -201,16 +307,16 @@\n             + 'FROM T '\r\n             + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n             + 'GROUP BY Year '\r\n             + ') M2 '\r\n-            + 'ON M2.YEAR = NAT_INDICATORS.YEAR ; ')\r\n+            + 'ON M2.YEAR = NAT_INDICATORS.YEAR ')\r\n     }\r\n }\r\n \r\n \r\n function localFactorsQueries(x, y, z) {\r\n     return (\r\n-        +'select Vals_yearA.year, Vals_yearA.V1, Vals_yearB.V2 '\r\n+         'select Vals_yearA.year, Vals_yearA.V1, Vals_yearB.V2 '\r\n         + 'from '\r\n         + '( '\r\n         + 'select YEAR as year, TRUNC(AVG(' + x + '),2) as V1 '\r\n         + 'from AHS '\r\n@@ -225,32 +331,32 @@\n         + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n         + 'GROUP BY YEAR '\r\n         + 'ORDER BY YEAR ASC '\r\n         + ') Vals_yearB '\r\n-        + 'on  Vals_yearB.year = Vals_yearA.year; '\r\n+        + 'on  Vals_yearB.year = Vals_yearA.year '\r\n     )\r\n }\r\n \r\n \r\n \r\n function pieChartsQueries(x, z, y, type) {\r\n     if (type == 'categorical') {\r\n-        + 'SELECT cats.Category, TRUNC((cats.V1/total.V2),3) as PERCENTAGE '\r\n+        return( 'SELECT cats.Category, TRUNC((cats.V1/total.V2),3) as PERCENTAGE '\r\n             + 'FROM '\r\n-            + '(SELECT ' + x + ' as Category, COUNT(X) AS V1 '\r\n+            + '(SELECT ' + x + ' as Category, COUNT(' + x + ') AS V1 '\r\n             + 'FROM AHS '\r\n             + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n             + 'GROUP BY ' + x + ' '\r\n             + ') cats '\r\n             + ', '\r\n             + '(SELECT COUNT(' + x + ') AS V2 '\r\n             + 'FROM AHS '\r\n             + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n-            + ') total; '\r\n+            + ') total ')\r\n \r\n     }\r\n-    else if (type = 'numerical') {\r\n-        + 'With maxs(r) as '\r\n+    else if (type == 'numerical') {\r\n+        return('With maxs(r) as '\r\n             + '(Select unique max(' + x + ') from AHS) '\r\n             + 'SELECT Ranges, TRUNC((cats.X/total.Y),3) as PERCENTAGE '\r\n             + 'from '\r\n             + '(select '\r\n@@ -281,9 +387,9 @@\n             + ', '\r\n             + '(SELECT COUNT(' + x + ') AS Y '\r\n             + 'FROM AHS '\r\n             + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n-            + ') total; '\r\n+            + ') total')\r\n     }\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1681852059780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,9 @@\n \r\n app.get('/testPage', (req, res) => {\r\n \r\n     const x = req.query.X\r\n-    //const statement = 'SELECT YEAR, AVG(' + x + ') Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC'\r\n-    const statement = 'ALTER PROFILE <profile name> LIMIT SESSIONS_PER_USER UNLIMITED'\r\n+    const statement = 'SELECT YEAR, AVG(' + x + ') Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC'\r\n     console.log(statement)\r\n \r\n     async function fetchData() {\r\n \r\n"
                },
                {
                    "date": 1681854782423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,556 @@\n+const express = require('express');\r\n+const oracledb = require('oracledb');\r\n+const cors = require('cors');\r\n+\r\n+const app = express();\r\n+\r\n+app.use(cors());\r\n+\r\n+app.get('/testPage', (req, res) => {\r\n+\r\n+    const x = req.query.X\r\n+    const statement = 'SELECT YEAR, AVG(' + x + ') Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC'\r\n+    console.log(statement)\r\n+\r\n+    async function fetchData() {\r\n+\r\n+        try {\r\n+\r\n+            const connection = await oracledb.getConnection({\r\n+\r\n+                user: \"aaron.estrellado\",\r\n+                password: \"nU8pvHr0K9EC5eZbnTJ9Oe1W\",\r\n+                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n+            })\r\n+\r\n+            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n+            return result;\r\n+\r\n+        } catch (error) {\r\n+\r\n+            console.error(error);\r\n+            return error;\r\n+\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    fetchData().then(dbRes => {\r\n+\r\n+        res.send(dbRes)\r\n+\r\n+    })\r\n+        .catch(error => {\r\n+\r\n+            res.send(\"bru\")\r\n+\r\n+        })\r\n+\r\n+})\r\n+\r\n+app.get('/MetroAreas', (req, res) => {\r\n+    const X = req.query.X\r\n+    const Y = req.query.Y\r\n+    const Z = req.query.Z\r\n+    const H = req.query.H\r\n+    const statistic = req.query.statistic\r\n+\r\n+    const statement = MetroAreasQueries(X, Y, Z, H, statistic)\r\n+    console.log(statement)\r\n+\r\n+    async function fetchData() {\r\n+ \r\n+        try {\r\n+\r\n+            const connection = await oracledb.getConnection({\r\n+\r\n+                user: \"aaron.estrellado\",\r\n+                password: \"nU8pvHr0K9EC5eZbnTJ9Oe1W\",\r\n+                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n+            })\r\n+\r\n+            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n+            return result;\r\n+\r\n+        } catch (error) {\r\n+\r\n+            console.error(error);\r\n+            return error;\r\n+\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    fetchData().then(dbRes => {\r\n+\r\n+        res.send(dbRes)\r\n+\r\n+    })\r\n+        .catch(error => {\r\n+\r\n+            res.send(\"bru\")\r\n+\r\n+        })\r\n+\r\n+        res.end;\r\n+\r\n+})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+app.get('/Distributions', (req, res) => {\r\n+    const X = req.query.X\r\n+    const Y = req.query.Y\r\n+    const Z = req.query.Z\r\n+    const Type = req.query.type\r\n+\r\n+    console.log(X)\r\n+    console.log(Y)\r\n+    console.log(Z)\r\n+    console.log(Type)\r\n+\r\n+    const statement = pieChartsQueries(X, Z, Y, Type)\r\n+    console.log(statement)\r\n+\r\n+    async function fetchData() {\r\n+ \r\n+        try {\r\n+\r\n+            const connection = await oracledb.getConnection({\r\n+\r\n+                user: \"manuel.nunez\",\r\n+                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n+                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n+            })\r\n+\r\n+            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n+            return result;\r\n+\r\n+        } catch (error) {\r\n+\r\n+            console.error(error);\r\n+            return error;\r\n+\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    fetchData().then(dbRes => {\r\n+\r\n+        res.send(dbRes)\r\n+\r\n+    })\r\n+        .catch(error => {\r\n+\r\n+            res.send(\"bru\")\r\n+\r\n+        })\r\n+\r\n+})\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+app.get('/LocalFactors', (req, res) => {\r\n+    const X = req.query.X\r\n+    const Y = req.query.Y\r\n+    const Z = req.query.Z\r\n+\r\n+    console.log(X)\r\n+    console.log(Y)\r\n+    console.log(Z)\r\n+\r\n+    const statement = localFactorsQueries(X, Y, Z)\r\n+    console.log(statement)\r\n+\r\n+    async function fetchData() {\r\n+ \r\n+        try {\r\n+\r\n+            const connection = await oracledb.getConnection({\r\n+\r\n+                user: \"manuel.nunez\",\r\n+                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n+                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n+            })\r\n+\r\n+            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n+            return result;\r\n+\r\n+        } catch (error) {\r\n+\r\n+            console.error(error);\r\n+            return error;\r\n+\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    fetchData().then(dbRes => {\r\n+\r\n+        res.send(dbRes)\r\n+\r\n+    })\r\n+        .catch(error => {\r\n+\r\n+            res.send(\"bru\")\r\n+\r\n+        })\r\n+\r\n+})\r\n+\r\n+app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n+\r\n+\r\n+function MetroAreasQueries(x, y, z, h, stat) {\r\n+\r\n+    if (stat == 'Average') {\r\n+\r\n+        return ('select Vals_yearA.year, Vals_yearA.V1, Vals_yearB.V2, nat_indicators.' + y + ' as Indicator '\r\n+            + 'from '\r\n+            + '( '\r\n+            + 'select YEAR as year, TRUNC(AVG(' + x + '),1) as V1 '\r\n+            + 'from AHS '\r\n+            + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+            + 'GROUP BY YEAR '\r\n+            + 'ORDER BY YEAR ASC '\r\n+            + ') Vals_yearA '\r\n+            + 'JOIN '\r\n+            + 'NAT_INDICATORS on Vals_yearA.year = NAT_INDICATORS.YEAR '\r\n+            + 'JOIN '\r\n+            + '( '\r\n+            + 'select YEAR as year, TRUNC(AVG(' + x + '),1) as V2 '\r\n+            + 'from AHS '\r\n+            + 'Where omb13cbsa = \\'\\'\\'' + h + '\\'\\'\\' '\r\n+            + 'GROUP BY YEAR '\r\n+            + 'ORDER BY YEAR ASC '\r\n+            + ') Vals_yearB '\r\n+            + 'on  Vals_yearB.year = NAT_INDICATORS.YEAR')\r\n+    }\r\n+    else if (stat = 'Median') {\r\n+        return ('WITH T(Year, Code, Att) AS '\r\n+            + '( '\r\n+            + 'SELECT YEAR, OMB13CBSA, ' + x + ' '\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL and (OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' or OMB13CBSA =  \\'\\'\\'' + h + '\\'\\'\\') '\r\n+            + ') '\r\n+            + 'SELECT M1.YEAR, M1.V1, M2.V2, NAT_INDICATORS.' + y + ' as Indicator '\r\n+            + 'FROM '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Att) AS V1 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M1 '\r\n+            + 'JOIN '\r\n+            + 'NAT_INDICATORS ON M1.YEAR = NAT_INDICATORS.YEAR '\r\n+            + 'JOIN '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Att) AS V2 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M2 '\r\n+            + 'ON M2.YEAR = NAT_INDICATORS.YEAR')\r\n+    }\r\n+    else if (stat = 'Upper Quartile') {\r\n+        return ('WITH T(Year, Code, Att) A '\r\n+            + '( '\r\n+            + 'SELECT YEAR, OMB13CBSA, ' + x\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL and (OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' or OMB13CBSA =  \\'\\'\\'' + h + '\\'\\'\\') '\r\n+            + ') '\r\n+            + 'SELECT M1.YEAR, M1.V1, M2.V2, NAT_INDICATORS.' + y + ' as Indicator '\r\n+            + 'FROM '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY Att) AS V1 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M1 '\r\n+            + 'JOIN '\r\n+            + 'NAT_INDICATORS ON M1.YEAR = NAT_INDICATORS.YEAR '\r\n+            + 'JOIN '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY Att) AS V2 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M2 '\r\n+            + 'ON M2.YEAR = NAT_INDICATORS.YEAR')\r\n+\r\n+    }\r\n+    else if (stat = 'Lower Quartile') {\r\n+        return ('WITH T(Year, Code, Att) AS '\r\n+            + '( '\r\n+            + 'SELECT YEAR, OMB13CBSA, ' + x\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL and (OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' or OMB13CBSA =  \\'\\'\\'' + h + '\\'\\'\\') '\r\n+            + ') '\r\n+            + 'SELECT M1.YEAR, M1.V1, M2.V2, NAT_INDICATORS.' + y + ' as Indicator '\r\n+            + 'FROM '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY Att) AS V1 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M1 '\r\n+            + 'JOIN '\r\n+            + 'NAT_INDICATORS ON M1.YEAR = NAT_INDICATORS.YEAR '\r\n+            + 'JOIN '\r\n+            + '( '\r\n+            + 'SELECT Year, PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY Att) AS V2 '\r\n+            + 'FROM T '\r\n+            + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n+            + 'GROUP BY Year '\r\n+            + ') M2 '\r\n+            + 'ON M2.YEAR = NAT_INDICATORS.YEAR ')\r\n+    }\r\n+}\r\n+\r\n+\r\n+function localFactorsQueries(x, y, z) {\r\n+    return (\r\n+         'select Vals_yearA.year, Vals_yearA.V1, Vals_yearB.V2 '\r\n+        + 'from '\r\n+        + '( '\r\n+        + 'select YEAR as year, TRUNC(AVG(' + x + '),2) as V1 '\r\n+        + 'from AHS '\r\n+        + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+        + 'GROUP BY YEAR '\r\n+        + 'ORDER BY YEAR ASC '\r\n+        + ') Vals_yearA '\r\n+        + 'JOIN '\r\n+        + '( '\r\n+        + 'select YEAR as year, TRUNC(AVG(' + y + '),2) as V2 '\r\n+        + 'from AHS '\r\n+        + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n+        + 'GROUP BY YEAR '\r\n+        + 'ORDER BY YEAR ASC '\r\n+        + ') Vals_yearB '\r\n+        + 'on  Vals_yearB.year = Vals_yearA.year '\r\n+    )\r\n+}\r\n+\r\n+\r\n+\r\n+function pieChartsQueries(x, z, y, type) {\r\n+    if (type == 'categorical') {\r\n+        return( 'SELECT cats.Category, TRUNC((cats.V1/total.V2),3) as PERCENTAGE '\r\n+            + 'FROM '\r\n+            + '(SELECT ' + x + ' as Category, COUNT(' + x + ') AS V1 '\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n+            + 'GROUP BY ' + x + ' '\r\n+            + ') cats '\r\n+            + ', '\r\n+            + '(SELECT COUNT(' + x + ') AS V2 '\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n+            + ') total ')\r\n+\r\n+    }\r\n+    else if (type == 'numerical') {\r\n+        return('With maxs(r) as '\r\n+            + '(Select unique max(' + x + ') from AHS) '\r\n+            + 'SELECT Ranges, TRUNC((cats.X/total.Y),3) as PERCENTAGE '\r\n+            + 'from '\r\n+            + '(select '\r\n+            + '(case '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*0  and ' + x + ' < (maxs.r/6)*1   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*1,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*1  and ' + x + ' < (maxs.r/6)*2   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*2,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*2  and ' + x + ' < (maxs.r/6)*3   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*3,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*3  and ' + x + ' < (maxs.r/6)*4   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*4,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*4  and ' + x + ' < (maxs.r/6)*5   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*5  then CONCAT( \\' X > \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) )'\r\n+            + 'end '\r\n+            + ') as Ranges, '\r\n+            + 'COUNT(CONTROL) as X '\r\n+            + 'from '\r\n+            + 'AHS, maxs '\r\n+            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n+            + 'GROUP BY '\r\n+            + '(case '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*0  and ' + x + ' < (maxs.r/6)*1   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*1,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*1  and ' + x + ' < (maxs.r/6)*2   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*2,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*2  and ' + x + ' < (maxs.r/6)*3   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*3,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*3  and ' + x + ' < (maxs.r/6)*4   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*4,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*4  and ' + x + ' < (maxs.r/6)*5   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) ) '\r\n+            + 'when ' + x + ' >= (maxs.r/6)*5  then CONCAT( \\' X > \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) ) '\r\n+            + 'end '\r\n+            + ') '\r\n+            + ') cats '\r\n+            + ', '\r\n+            + '(SELECT COUNT(' + x + ') AS Y '\r\n+            + 'FROM AHS '\r\n+            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n+            + ') total')\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+function metro(message) {\r\n+\r\n+    if (message == 'New York, NY') {\r\n+        return '\\'35620\\''\r\n+    }\r\n+    if (message == 'Los Angeles, CA') {\r\n+        return '\\'31080\\''\r\n+    }\r\n+    if (message == 'Chicago, IL') {\r\n+        return '\\'16980\\''\r\n+    }\r\n+    if (message == 'Philadelphia, PA') {\r\n+        return '\\'19100\\''\r\n+    }\r\n+    if (message == 'Huston, TX') {\r\n+        return '\\'37980\\''\r\n+    }\r\n+    if (message == 'Washington, DC') {\r\n+        return '\\'26420\\''\r\n+    }\r\n+    if (message == 'Miami, FL') {\r\n+        return '\\'47900\\''\r\n+    }\r\n+    if (message == 'Atlanta, GA') {\r\n+        return '\\'33100\\''\r\n+    }\r\n+    if (message == 'New York, NY') {\r\n+        return '\\'12060\\''\r\n+    }\r\n+    if (message == 'Boston, MA') {\r\n+        return '\\'14460\\''\r\n+    }\r\n+    if (message == 'San Francisco, CA') {\r\n+        return '\\'41860\\''\r\n+    }\r\n+    if (message == 'Detroit, MI') {\r\n+        return '\\'19820\\''\r\n+    }\r\n+    if (message == 'Phoenix, AZ') {\r\n+        return '\\'38060\\''\r\n+    }\r\n+    if (message == 'Seattle, WA') {\r\n+        return '\\'35620\\''\r\n+    }\r\n+    if (message == 'Riverside, CA') {\r\n+        return '\\'42660\\''\r\n+    }\r\n+    else {\r\n+        return '\\'35620\\''\r\n+    }\r\n+\r\n+}\r\n+\r\n+function metroIndicator(message) {\r\n+\r\n+    if (message == 'Dish Washers') {\r\n+        return 'DISHWASH'\r\n+    }\r\n+    if (message == 'Garages') {\r\n+        return 'GARAGE'\r\n+    }\r\n+    if (message == 'Washing Machines') {\r\n+        return 'WASHER'\r\n+    }\r\n+    if (message == 'Porch') {\r\n+        return 'PORCH'\r\n+    }\r\n+    if (message == 'Kitchen Sink') {\r\n+        return 'KITCHSINK'\r\n+    }\r\n+    if (message == 'Household Rating') {\r\n+        return 'RATINGHS'\r\n+    }\r\n+    if (message == 'Neighborhood Rating') {\r\n+        return 'RATINGNH'\r\n+    }\r\n+    if (message == 'Family Income') {\r\n+        return 'FINCP'\r\n+    }\r\n+    if (message == 'Resident\\'s Income') {\r\n+        return 'HINCP'\r\n+    }\r\n+    if (message == 'Resident\\'s Sex') {\r\n+        return 'HHSEX'\r\n+    }\r\n+    if (message == 'Resident\\'s Marriage Status') {\r\n+        return 'HHMAR'\r\n+    }\r\n+    if (message == 'Resident\\'s Education Level') {\r\n+        return 'HHGRAD'\r\n+    }\r\n+    if (message == 'Resident\\'s Age') {\r\n+        return 'HHAGE'\r\n+    }\r\n+    if (message == 'Property Value') {\r\n+        return 'MARKETVAL'\r\n+    }\r\n+    if (message == 'Monthly Mortgage') {\r\n+        return 'MORTAMT'\r\n+    }\r\n+    if (message == 'Monthly Rent') {\r\n+        return 'RENT'\r\n+    }\r\n+    if (message == 'Year Built') {\r\n+        return 'YRBUILT'\r\n+    }\r\n+    if (message == 'Unit Size') {\r\n+        return 'UNITSIZE'\r\n+    }\r\n+    if (message == 'No Access To Water') {\r\n+        return 'NOWAT'\r\n+    }\r\n+    if (message == 'Monthly Home Expenses') {\r\n+        return 'TOTHCAMT'\r\n+    }\r\n+    if (message == 'Total Rooms') {\r\n+        return 'TOTROOM'\r\n+    }\r\n+    if (message == 'Rent Control Present') {\r\n+        return 'RENTCNTRL'\r\n+    }\r\n+    if (message == 'Number of Inhabitants') {\r\n+        return 'NUMPEOPLE'\r\n+    }\r\n+    else {\r\n+        return 'RENT'\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+\r\n+function natIndicator(message) {\r\n+\r\n+    if (message == 'Inflation Rate') {\r\n+        return 'INFLATION'\r\n+    }\r\n+    if (message == 'CCI') {\r\n+        return 'CCI'\r\n+    }\r\n+    if (message == 'Federal Intrest Rate') {\r\n+        return 'INTRATE'\r\n+    }\r\n+    if (message == 'GDP') {\r\n+        return 'GDP'\r\n+    }\r\n+    if (message == 'Employment Rate') {\r\n+        return 'EMPRATE'\r\n+    }\r\n+    if (message == 'Bond Yield') {\r\n+        return 'BONDYIELD'\r\n+    }\r\n+    else {\r\n+        return 'INFLATION'\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681854808539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,10 +119,10 @@\n         try {\r\n \r\n             const connection = await oracledb.getConnection({\r\n \r\n-                user: \"manuel.nunez\",\r\n-                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n+                user: \"aaron.estrellado\",\r\n+                password: \"nU8pvHr0K9EC5eZbnTJ9Oe1W\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n             const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n@@ -171,10 +171,10 @@\n         try {\r\n \r\n             const connection = await oracledb.getConnection({\r\n \r\n-                user: \"manuel.nunez\",\r\n-                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n+                user: \"aaron.estrellado\",\r\n+                password: \"nU8pvHr0K9EC5eZbnTJ9Oe1W\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n             const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n@@ -552,561 +552,5 @@\n     else {\r\n         return 'INFLATION'\r\n     }\r\n \r\n-}\n-const express = require('express');\r\n-const oracledb = require('oracledb');\r\n-const cors = require('cors');\r\n-\r\n-const app = express();\r\n-\r\n-app.use(cors());\r\n-\r\n-app.get('/testPage', (req, res) => {\r\n-\r\n-    const x = req.query.X\r\n-    const statement = 'SELECT YEAR, AVG(' + x + ') Dishwashers FROM AHS GROUP BY YEAR ORDER BY YEAR ASC'\r\n-    console.log(statement)\r\n-\r\n-    async function fetchData() {\r\n-\r\n-        try {\r\n-\r\n-            const connection = await oracledb.getConnection({\r\n-\r\n-                user: \"manuel.nunez\",\r\n-                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n-                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n-            })\r\n-\r\n-            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n-            return result;\r\n-\r\n-        } catch (error) {\r\n-\r\n-            console.error(error);\r\n-            return error;\r\n-\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    fetchData().then(dbRes => {\r\n-\r\n-        res.send(dbRes)\r\n-\r\n-    })\r\n-        .catch(error => {\r\n-\r\n-            res.send(\"bru\")\r\n-\r\n-        })\r\n-\r\n-})\r\n-\r\n-app.get('/MetroAreas', (req, res) => {\r\n-    const X = req.query.X\r\n-    const Y = req.query.Y\r\n-    const Z = req.query.Z\r\n-    const H = req.query.H\r\n-    const statistic = req.query.statistic\r\n-\r\n-    const statement = MetroAreasQueries(X, Y, Z, H, statistic)\r\n-    console.log(statement)\r\n-\r\n-    async function fetchData() {\r\n- \r\n-        try {\r\n-\r\n-            const connection = await oracledb.getConnection({\r\n-\r\n-                user: \"manuel.nunez\",\r\n-                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n-                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n-            })\r\n-\r\n-            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n-            return result;\r\n-\r\n-        } catch (error) {\r\n-\r\n-            console.error(error);\r\n-            return error;\r\n-\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    fetchData().then(dbRes => {\r\n-\r\n-        res.send(dbRes)\r\n-\r\n-    })\r\n-        .catch(error => {\r\n-\r\n-            res.send(\"bru\")\r\n-\r\n-        })\r\n-\r\n-        res.end;\r\n-\r\n-})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-app.get('/Distributions', (req, res) => {\r\n-    const X = req.query.X\r\n-    const Y = req.query.Y\r\n-    const Z = req.query.Z\r\n-    const Type = req.query.type\r\n-\r\n-    console.log(X)\r\n-    console.log(Y)\r\n-    console.log(Z)\r\n-    console.log(Type)\r\n-\r\n-    const statement = pieChartsQueries(X, Z, Y, Type)\r\n-    console.log(statement)\r\n-\r\n-    async function fetchData() {\r\n- \r\n-        try {\r\n-\r\n-            const connection = await oracledb.getConnection({\r\n-\r\n-                user: \"manuel.nunez\",\r\n-                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n-                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n-            })\r\n-\r\n-            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n-            return result;\r\n-\r\n-        } catch (error) {\r\n-\r\n-            console.error(error);\r\n-            return error;\r\n-\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    fetchData().then(dbRes => {\r\n-\r\n-        res.send(dbRes)\r\n-\r\n-    })\r\n-        .catch(error => {\r\n-\r\n-            res.send(\"bru\")\r\n-\r\n-        })\r\n-\r\n-})\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-app.get('/LocalFactors', (req, res) => {\r\n-    const X = req.query.X\r\n-    const Y = req.query.Y\r\n-    const Z = req.query.Z\r\n-\r\n-    console.log(X)\r\n-    console.log(Y)\r\n-    console.log(Z)\r\n-\r\n-    const statement = localFactorsQueries(X, Y, Z)\r\n-    console.log(statement)\r\n-\r\n-    async function fetchData() {\r\n- \r\n-        try {\r\n-\r\n-            const connection = await oracledb.getConnection({\r\n-\r\n-                user: \"manuel.nunez\",\r\n-                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n-                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n-            })\r\n-\r\n-            const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n-            return result;\r\n-\r\n-        } catch (error) {\r\n-\r\n-            console.error(error);\r\n-            return error;\r\n-\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    fetchData().then(dbRes => {\r\n-\r\n-        res.send(dbRes)\r\n-\r\n-    })\r\n-        .catch(error => {\r\n-\r\n-            res.send(\"bru\")\r\n-\r\n-        })\r\n-\r\n-})\r\n-\r\n-app.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n-\r\n-\r\n-function MetroAreasQueries(x, y, z, h, stat) {\r\n-\r\n-    if (stat == 'Average') {\r\n-\r\n-        return ('select Vals_yearA.year, Vals_yearA.V1, Vals_yearB.V2, nat_indicators.' + y + ' as Indicator '\r\n-            + 'from '\r\n-            + '( '\r\n-            + 'select YEAR as year, TRUNC(AVG(' + x + '),1) as V1 '\r\n-            + 'from AHS '\r\n-            + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n-            + 'GROUP BY YEAR '\r\n-            + 'ORDER BY YEAR ASC '\r\n-            + ') Vals_yearA '\r\n-            + 'JOIN '\r\n-            + 'NAT_INDICATORS on Vals_yearA.year = NAT_INDICATORS.YEAR '\r\n-            + 'JOIN '\r\n-            + '( '\r\n-            + 'select YEAR as year, TRUNC(AVG(' + x + '),1) as V2 '\r\n-            + 'from AHS '\r\n-            + 'Where omb13cbsa = \\'\\'\\'' + h + '\\'\\'\\' '\r\n-            + 'GROUP BY YEAR '\r\n-            + 'ORDER BY YEAR ASC '\r\n-            + ') Vals_yearB '\r\n-            + 'on  Vals_yearB.year = NAT_INDICATORS.YEAR')\r\n-    }\r\n-    else if (stat = 'Median') {\r\n-        return ('WITH T(Year, Code, Att) AS '\r\n-            + '( '\r\n-            + 'SELECT YEAR, OMB13CBSA, ' + x + ' '\r\n-            + 'FROM AHS '\r\n-            + 'WHERE ' + x + ' IS NOT NULL and (OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' or OMB13CBSA =  \\'\\'\\'' + h + '\\'\\'\\') '\r\n-            + ') '\r\n-            + 'SELECT M1.YEAR, M1.V1, M2.V2, NAT_INDICATORS.' + y + ' as Indicator '\r\n-            + 'FROM '\r\n-            + '( '\r\n-            + 'SELECT Year, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Att) AS V1 '\r\n-            + 'FROM T '\r\n-            + 'WHERE Code = \\'\\'\\'' + z + '\\'\\'\\' '\r\n-            + 'GROUP BY Year '\r\n-            + ') M1 '\r\n-            + 'JOIN '\r\n-            + 'NAT_INDICATORS ON M1.YEAR = NAT_INDICATORS.YEAR '\r\n-            + 'JOIN '\r\n-            + '( '\r\n-            + 'SELECT Year, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Att) AS V2 '\r\n-            + 'FROM T '\r\n-            + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n-            + 'GROUP BY Year '\r\n-            + ') M2 '\r\n-            + 'ON M2.YEAR = NAT_INDICATORS.YEAR')\r\n-    }\r\n-    else if (stat = 'Upper Quartile') {\r\n-        return ('WITH T(Year, Code, Att) A '\r\n-            + '( '\r\n-            + 'SELECT YEAR, OMB13CBSA, ' + x\r\n-            + 'FROM AHS '\r\n-            + 'WHERE ' + x + ' IS NOT NULL and (OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' or OMB13CBSA =  \\'\\'\\'' + h + '\\'\\'\\') '\r\n-            + ') '\r\n-            + 'SELECT M1.YEAR, M1.V1, M2.V2, NAT_INDICATORS.' + y + ' as Indicator '\r\n-            + 'FROM '\r\n-            + '( '\r\n-            + 'SELECT Year, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY Att) AS V1 '\r\n-            + 'FROM T '\r\n-            + 'WHERE Code = \\'\\'\\'' + z + '\\'\\'\\' '\r\n-            + 'GROUP BY Year '\r\n-            + ') M1 '\r\n-            + 'JOIN '\r\n-            + 'NAT_INDICATORS ON M1.YEAR = NAT_INDICATORS.YEAR '\r\n-            + 'JOIN '\r\n-            + '( '\r\n-            + 'SELECT Year, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY Att) AS V2 '\r\n-            + 'FROM T '\r\n-            + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n-            + 'GROUP BY Year '\r\n-            + ') M2 '\r\n-            + 'ON M2.YEAR = NAT_INDICATORS.YEAR')\r\n-\r\n-    }\r\n-    else if (stat = 'Lower Quartile') {\r\n-        return ('WITH T(Year, Code, Att) AS '\r\n-            + '( '\r\n-            + 'SELECT YEAR, OMB13CBSA, ' + x\r\n-            + 'FROM AHS '\r\n-            + 'WHERE ' + x + ' IS NOT NULL and (OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' or OMB13CBSA =  \\'\\'\\'' + h + '\\'\\'\\') '\r\n-            + ') '\r\n-            + 'SELECT M1.YEAR, M1.V1, M2.V2, NAT_INDICATORS.' + y + ' as Indicator '\r\n-            + 'FROM '\r\n-            + '( '\r\n-            + 'SELECT Year, PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY Att) AS V1 '\r\n-            + 'FROM T '\r\n-            + 'WHERE Code = \\'\\'\\'' + z + '\\'\\'\\' '\r\n-            + 'GROUP BY Year '\r\n-            + ') M1 '\r\n-            + 'JOIN '\r\n-            + 'NAT_INDICATORS ON M1.YEAR = NAT_INDICATORS.YEAR '\r\n-            + 'JOIN '\r\n-            + '( '\r\n-            + 'SELECT Year, PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY Att) AS V2 '\r\n-            + 'FROM T '\r\n-            + 'WHERE Code = \\'\\'\\'' + h + '\\'\\'\\' '\r\n-            + 'GROUP BY Year '\r\n-            + ') M2 '\r\n-            + 'ON M2.YEAR = NAT_INDICATORS.YEAR ')\r\n-    }\r\n-}\r\n-\r\n-\r\n-function localFactorsQueries(x, y, z) {\r\n-    return (\r\n-         'select Vals_yearA.year, Vals_yearA.V1, Vals_yearB.V2 '\r\n-        + 'from '\r\n-        + '( '\r\n-        + 'select YEAR as year, TRUNC(AVG(' + x + '),2) as V1 '\r\n-        + 'from AHS '\r\n-        + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n-        + 'GROUP BY YEAR '\r\n-        + 'ORDER BY YEAR ASC '\r\n-        + ') Vals_yearA '\r\n-        + 'JOIN '\r\n-        + '( '\r\n-        + 'select YEAR as year, TRUNC(AVG(' + y + '),2) as V2 '\r\n-        + 'from AHS '\r\n-        + 'Where omb13cbsa = \\'\\'\\'' + z + '\\'\\'\\' '\r\n-        + 'GROUP BY YEAR '\r\n-        + 'ORDER BY YEAR ASC '\r\n-        + ') Vals_yearB '\r\n-        + 'on  Vals_yearB.year = Vals_yearA.year '\r\n-    )\r\n-}\r\n-\r\n-\r\n-\r\n-function pieChartsQueries(x, z, y, type) {\r\n-    if (type == 'categorical') {\r\n-        return( 'SELECT cats.Category, TRUNC((cats.V1/total.V2),3) as PERCENTAGE '\r\n-            + 'FROM '\r\n-            + '(SELECT ' + x + ' as Category, COUNT(' + x + ') AS V1 '\r\n-            + 'FROM AHS '\r\n-            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n-            + 'GROUP BY ' + x + ' '\r\n-            + ') cats '\r\n-            + ', '\r\n-            + '(SELECT COUNT(' + x + ') AS V2 '\r\n-            + 'FROM AHS '\r\n-            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n-            + ') total ')\r\n-\r\n-    }\r\n-    else if (type == 'numerical') {\r\n-        return('With maxs(r) as '\r\n-            + '(Select unique max(' + x + ') from AHS) '\r\n-            + 'SELECT Ranges, TRUNC((cats.X/total.Y),3) as PERCENTAGE '\r\n-            + 'from '\r\n-            + '(select '\r\n-            + '(case '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*0  and ' + x + ' < (maxs.r/6)*1   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*1,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*1  and ' + x + ' < (maxs.r/6)*2   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*2,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*2  and ' + x + ' < (maxs.r/6)*3   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*3,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*3  and ' + x + ' < (maxs.r/6)*4   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*4,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*4  and ' + x + ' < (maxs.r/6)*5   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*5  then CONCAT( \\' X > \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) )'\r\n-            + 'end '\r\n-            + ') as Ranges, '\r\n-            + 'COUNT(CONTROL) as X '\r\n-            + 'from '\r\n-            + 'AHS, maxs '\r\n-            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n-            + 'GROUP BY '\r\n-            + '(case '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*0  and ' + x + ' < (maxs.r/6)*1   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*1,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*1  and ' + x + ' < (maxs.r/6)*2   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*2,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*2  and ' + x + ' < (maxs.r/6)*3   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*3,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*3  and ' + x + ' < (maxs.r/6)*4   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*4,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*4  and ' + x + ' < (maxs.r/6)*5   then CONCAT( \\' X < \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) ) '\r\n-            + 'when ' + x + ' >= (maxs.r/6)*5  then CONCAT( \\' X > \\', CAST(TRUNC((maxs.r/6)*5,2) AS VARCHAR(10)) ) '\r\n-            + 'end '\r\n-            + ') '\r\n-            + ') cats '\r\n-            + ', '\r\n-            + '(SELECT COUNT(' + x + ') AS Y '\r\n-            + 'FROM AHS '\r\n-            + 'WHERE ' + x + ' IS NOT NULL AND OMB13CBSA = \\'\\'\\'' + z + '\\'\\'\\' AND YEAR = ' + y + ' '\r\n-            + ') total')\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-function metro(message) {\r\n-\r\n-    if (message == 'New York, NY') {\r\n-        return '\\'35620\\''\r\n-    }\r\n-    if (message == 'Los Angeles, CA') {\r\n-        return '\\'31080\\''\r\n-    }\r\n-    if (message == 'Chicago, IL') {\r\n-        return '\\'16980\\''\r\n-    }\r\n-    if (message == 'Philadelphia, PA') {\r\n-        return '\\'19100\\''\r\n-    }\r\n-    if (message == 'Huston, TX') {\r\n-        return '\\'37980\\''\r\n-    }\r\n-    if (message == 'Washington, DC') {\r\n-        return '\\'26420\\''\r\n-    }\r\n-    if (message == 'Miami, FL') {\r\n-        return '\\'47900\\''\r\n-    }\r\n-    if (message == 'Atlanta, GA') {\r\n-        return '\\'33100\\''\r\n-    }\r\n-    if (message == 'New York, NY') {\r\n-        return '\\'12060\\''\r\n-    }\r\n-    if (message == 'Boston, MA') {\r\n-        return '\\'14460\\''\r\n-    }\r\n-    if (message == 'San Francisco, CA') {\r\n-        return '\\'41860\\''\r\n-    }\r\n-    if (message == 'Detroit, MI') {\r\n-        return '\\'19820\\''\r\n-    }\r\n-    if (message == 'Phoenix, AZ') {\r\n-        return '\\'38060\\''\r\n-    }\r\n-    if (message == 'Seattle, WA') {\r\n-        return '\\'35620\\''\r\n-    }\r\n-    if (message == 'Riverside, CA') {\r\n-        return '\\'42660\\''\r\n-    }\r\n-    else {\r\n-        return '\\'35620\\''\r\n-    }\r\n-\r\n-}\r\n-\r\n-function metroIndicator(message) {\r\n-\r\n-    if (message == 'Dish Washers') {\r\n-        return 'DISHWASH'\r\n-    }\r\n-    if (message == 'Garages') {\r\n-        return 'GARAGE'\r\n-    }\r\n-    if (message == 'Washing Machines') {\r\n-        return 'WASHER'\r\n-    }\r\n-    if (message == 'Porch') {\r\n-        return 'PORCH'\r\n-    }\r\n-    if (message == 'Kitchen Sink') {\r\n-        return 'KITCHSINK'\r\n-    }\r\n-    if (message == 'Household Rating') {\r\n-        return 'RATINGHS'\r\n-    }\r\n-    if (message == 'Neighborhood Rating') {\r\n-        return 'RATINGNH'\r\n-    }\r\n-    if (message == 'Family Income') {\r\n-        return 'FINCP'\r\n-    }\r\n-    if (message == 'Resident\\'s Income') {\r\n-        return 'HINCP'\r\n-    }\r\n-    if (message == 'Resident\\'s Sex') {\r\n-        return 'HHSEX'\r\n-    }\r\n-    if (message == 'Resident\\'s Marriage Status') {\r\n-        return 'HHMAR'\r\n-    }\r\n-    if (message == 'Resident\\'s Education Level') {\r\n-        return 'HHGRAD'\r\n-    }\r\n-    if (message == 'Resident\\'s Age') {\r\n-        return 'HHAGE'\r\n-    }\r\n-    if (message == 'Property Value') {\r\n-        return 'MARKETVAL'\r\n-    }\r\n-    if (message == 'Monthly Mortgage') {\r\n-        return 'MORTAMT'\r\n-    }\r\n-    if (message == 'Monthly Rent') {\r\n-        return 'RENT'\r\n-    }\r\n-    if (message == 'Year Built') {\r\n-        return 'YRBUILT'\r\n-    }\r\n-    if (message == 'Unit Size') {\r\n-        return 'UNITSIZE'\r\n-    }\r\n-    if (message == 'No Access To Water') {\r\n-        return 'NOWAT'\r\n-    }\r\n-    if (message == 'Monthly Home Expenses') {\r\n-        return 'TOTHCAMT'\r\n-    }\r\n-    if (message == 'Total Rooms') {\r\n-        return 'TOTROOM'\r\n-    }\r\n-    if (message == 'Rent Control Present') {\r\n-        return 'RENTCNTRL'\r\n-    }\r\n-    if (message == 'Number of Inhabitants') {\r\n-        return 'NUMPEOPLE'\r\n-    }\r\n-    else {\r\n-        return 'RENT'\r\n-    }\r\n-\r\n-}\r\n-\r\n-\r\n-\r\n-function natIndicator(message) {\r\n-\r\n-    if (message == 'Inflation Rate') {\r\n-        return 'INFLATION'\r\n-    }\r\n-    if (message == 'CCI') {\r\n-        return 'CCI'\r\n-    }\r\n-    if (message == 'Federal Intrest Rate') {\r\n-        return 'INTRATE'\r\n-    }\r\n-    if (message == 'GDP') {\r\n-        return 'GDP'\r\n-    }\r\n-    if (message == 'Employment Rate') {\r\n-        return 'EMPRATE'\r\n-    }\r\n-    if (message == 'Bond Yield') {\r\n-        return 'BONDYIELD'\r\n-    }\r\n-    else {\r\n-        return 'INFLATION'\r\n-    }\r\n-\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681858453131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n         try {\r\n \r\n             const connection = await oracledb.getConnection({\r\n \r\n-                user: \"aaron.estrellado\",\r\n-                password: \"nU8pvHr0K9EC5eZbnTJ9Oe1W\",\r\n+                user: \"manuel.nunez\",\r\n+                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n             const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n@@ -63,10 +63,10 @@\n         try {\r\n \r\n             const connection = await oracledb.getConnection({\r\n \r\n-                user: \"aaron.estrellado\",\r\n-                password: \"nU8pvHr0K9EC5eZbnTJ9Oe1W\",\r\n+                user: \"manuel.nunez\",\r\n+                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n             const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n@@ -119,10 +119,10 @@\n         try {\r\n \r\n             const connection = await oracledb.getConnection({\r\n \r\n-                user: \"aaron.estrellado\",\r\n-                password: \"nU8pvHr0K9EC5eZbnTJ9Oe1W\",\r\n+                user: \"manuel.nunez\",\r\n+                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n             const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n@@ -171,10 +171,10 @@\n         try {\r\n \r\n             const connection = await oracledb.getConnection({\r\n \r\n-                user: \"aaron.estrellado\",\r\n-                password: \"nU8pvHr0K9EC5eZbnTJ9Oe1W\",\r\n+                user: \"manuel.nunez\",\r\n+                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                 connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n             })\r\n \r\n             const result = await connection.execute(statement, [], { outFormat: oracledb.OUT_FORMAT_OBJECT })\r\n@@ -191,9 +191,9 @@\n \r\n     fetchData().then(dbRes => {\r\n \r\n         res.send(dbRes)\r\n-\r\n+nat_indicators\r\n     })\r\n         .catch(error => {\r\n \r\n             res.send(\"bru\")\r\n"
                }
            ],
            "date": 1680540716928,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst oracledb = require('oracledb');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\n\r\napp.use(cors());\r\n\r\n\r\napp.get(\"/api\", (req, res) => {\r\n\r\n    res.send('Hello, World!')\r\n\r\n})\r\n\r\napp.get('/students', (req, res) => {\r\n\r\n    async function fetchDataStudents() {\r\n\r\n        try {\r\n\r\n            oracledb.initOracleClient({libDir: 'C:\\\\oracle\\\\instantclient_21_9'});\r\n\r\n\r\n\r\n            const connection = await oracledb.getConnection({\r\n\r\n                user: \"manuel.nunez\",\r\n                password: \"SJ3vtvEHEFavwAGrAwjUQ2XT\",\r\n                connectString: \"(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = oracle.cise.ufl.edu)(PORT = 1521))(CONNECT_DATA =(SID= ORCL)))\"\r\n            })\r\n\r\n            const result = await connection.execute('SELECT * FROM AHS_POST_2015')\r\n            return result;\r\n\r\n        } catch (error) {\r\n\r\n            console.error(error);\r\n            return error;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    fetchDataStudents().then(dbRes => {\r\n\r\n        res.send(dbRes)\r\n\r\n    })\r\n        .catch(error => {\r\n\r\n            res.send(\"bru\")\r\n\r\n        })\r\n\r\n})\r\n\r\napp.get('/message', (req,res) => {\r\n\r\n    res.json({message: \"Hello from server!\"})\r\n\r\n})\r\n\r\napp.listen(8080, () => { console.log(\"Server started on port 8080\") })\r\n"
        }
    ]
}