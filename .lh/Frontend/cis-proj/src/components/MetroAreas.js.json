{
    "sourceFile": "Frontend/cis-proj/src/components/MetroAreas.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 124,
            "patches": [
                {
                    "date": 1681839611237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681839623203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n \r\n+var dataMetro1;\r\n \r\n-\r\n function MetropolitanAreas() {\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n         { value: '31080', label: \"Los Angeles, CA\" },\r\n"
                },
                {
                    "date": 1681839628669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n \r\n var dataMetro1;\r\n+var dataMetro2;\r\n \r\n function MetropolitanAreas() {\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n"
                },
                {
                    "date": 1681839647269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import Button from 'react-bootstrap/Button'\r\n \r\n var dataMetro1;\r\n var dataMetro2;\r\n+var dataHHA;\r\n \r\n function MetropolitanAreas() {\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n"
                },
                {
                    "date": 1681839655102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n \r\n var dataMetro1;\r\n var dataMetro2;\r\n var dataHHA;\r\n+var dataNI;\r\n \r\n+\r\n function MetropolitanAreas() {\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n         { value: '31080', label: \"Los Angeles, CA\" },\r\n"
                },
                {
                    "date": 1681839691869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,10 @@\n import Button from 'react-bootstrap/Button'\r\n \r\n var dataMetro1;\r\n var dataMetro2;\r\n-var dataHHA;\r\n var dataNI;\r\n \r\n-\r\n function MetropolitanAreas() {\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n         { value: '31080', label: \"Los Angeles, CA\" },\r\n"
                },
                {
                    "date": 1681839755255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,10 @@\n         axios.request(options).then((response) => {\r\n \r\n             console.log(response)\r\n \r\n+            \r\n+\r\n         })\r\n     }\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1681839778416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n         axios.request(options).then((response) => {\r\n \r\n             console.log(response)\r\n \r\n-            \r\n+            for (var a = 0; a < response.data.rows.length; a++)\r\n \r\n         })\r\n     }\r\n \r\n"
                },
                {
                    "date": 1681839783820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,13 @@\n         axios.request(options).then((response) => {\r\n \r\n             console.log(response)\r\n \r\n-            for (var a = 0; a < response.data.rows.length; a++)\r\n+            for (var a = 0; a < response.data.rows.length; a++) {\r\n \r\n+                \r\n+            }\r\n+\r\n         })\r\n     }\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1681839837384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n+import LineChartComp from '../components'\r\n \r\n var dataMetro1;\r\n var dataMetro2;\r\n var dataNI;\r\n@@ -78,9 +79,10 @@\n             console.log(response)\r\n \r\n             for (var a = 0; a < response.data.rows.length; a++) {\r\n \r\n-                \r\n+\r\n+\r\n             }\r\n \r\n         })\r\n     }\r\n@@ -155,8 +157,10 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n \r\n+\r\n+            <LineChartComp></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681839842752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import LineChartComp from '../components'\r\n+import LineChartComp from './components'\r\n \r\n var dataMetro1;\r\n var dataMetro2;\r\n var dataNI;\r\n"
                },
                {
                    "date": 1681839855818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import LineChartComp from './components'\r\n+import LineChartComp from '/components'\r\n \r\n var dataMetro1;\r\n var dataMetro2;\r\n var dataNI;\r\n"
                },
                {
                    "date": 1681839864037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import LineChartComp from '/components'\r\n+import LineChartComp from 'components'\r\n \r\n var dataMetro1;\r\n var dataMetro2;\r\n var dataNI;\r\n"
                },
                {
                    "date": 1681839875134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import LineChartComp from 'components'\r\n \r\n var dataMetro1;\r\n var dataMetro2;\r\n var dataNI;\r\n"
                },
                {
                    "date": 1681839880968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,10 +156,8 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n \r\n-\r\n-            <LineChartComp></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681839911487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n+import { LineChartComp } from './LineChartComp';\r\n \r\n var dataMetro1;\r\n var dataMetro2;\r\n var dataNI;\r\n@@ -155,9 +156,9 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n-\r\n+            <LineChartComp></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681840120538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,10 +79,10 @@\n             console.log(response)\r\n \r\n             for (var a = 0; a < response.data.rows.length; a++) {\r\n \r\n+                \r\n \r\n-\r\n             }\r\n \r\n         })\r\n     }\r\n"
                },
                {
                    "date": 1681840180908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             console.log(response)\r\n \r\n             for (var a = 0; a < response.data.rows.length; a++) {\r\n \r\n-                \r\n+                dataMetro1 = response.data.rows[a][1]\r\n \r\n             }\r\n \r\n         })\r\n"
                },
                {
                    "date": 1681840189577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,10 @@\n                 dataMetro1 = response.data.rows[a][1]\r\n \r\n             }\r\n \r\n+            console.log(dataMetro1)\r\n+\r\n         })\r\n     }\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1681840249706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             console.log(response)\r\n \r\n             for (var a = 0; a < response.data.rows.length; a++) {\r\n \r\n-                dataMetro1 = response.data.rows[a][1]\r\n+                dataMetro1[a] = response.data.rows[a][1]\r\n \r\n             }\r\n \r\n             console.log(dataMetro1)\r\n"
                },
                {
                    "date": 1681840332045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             console.log(response)\r\n \r\n             for (var a = 0; a < response.data.rows.length; a++) {\r\n \r\n-                dataMetro1[a] = response.data.rows[a][1]\r\n+                dataMetro1.push(response.data.rows[a][1]);\r\n \r\n             }\r\n \r\n             console.log(dataMetro1)\r\n"
                },
                {
                    "date": 1681840360409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n import { LineChartComp } from './LineChartComp';\r\n \r\n-var dataMetro1;\r\n+var dataMetro1 = [];\r\n var dataMetro2;\r\n var dataNI;\r\n \r\n function MetropolitanAreas() {\r\n"
                },
                {
                    "date": 1681840392136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         }\r\n         console.log(options)\r\n         axios.request(options).then((response) => {\r\n \r\n-            console.log(response)\r\n+            console.log(response.data.rows[1])\r\n \r\n             for (var a = 0; a < response.data.rows.length; a++) {\r\n \r\n                 dataMetro1.push(response.data.rows[a][1]);\r\n"
                },
                {
                    "date": 1681840412460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         }\r\n         console.log(options)\r\n         axios.request(options).then((response) => {\r\n \r\n-            console.log(response.data.rows[1])\r\n+            console.log(response.data)\r\n \r\n             for (var a = 0; a < response.data.rows.length; a++) {\r\n \r\n                 dataMetro1.push(response.data.rows[a][1]);\r\n"
                },
                {
                    "date": 1681840422653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n         axios.request(options).then((response) => {\r\n \r\n             console.log(response.data)\r\n \r\n-            for (var a = 0; a < response.data.rows.length; a++) {\r\n+            for (var a = 0; a < response.data.rows.length(); a++) {\r\n \r\n                 dataMetro1.push(response.data.rows[a][1]);\r\n \r\n             }\r\n"
                },
                {
                    "date": 1681840455108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,14 +77,14 @@\n         axios.request(options).then((response) => {\r\n \r\n             console.log(response.data)\r\n \r\n-            for (var a = 0; a < response.data.rows.length(); a++) {\r\n+//            for (var a = 0; a < response.data.rows.length(); a++) {\r\n+//\r\n+//                dataMetro1.push(response.data.rows[a][1]);\r\n+//\r\n+//            }\r\n \r\n-                dataMetro1.push(response.data.rows[a][1]);\r\n-\r\n-            }\r\n-\r\n             console.log(dataMetro1)\r\n \r\n         })\r\n     }\r\n"
                },
                {
                    "date": 1681840462317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n //                dataMetro1.push(response.data.rows[a][1]);\r\n //\r\n //            }\r\n \r\n-            console.log(dataMetro1)\r\n+ //           console.log(dataMetro1)\r\n \r\n         })\r\n     }\r\n \r\n"
                },
                {
                    "date": 1681840471103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         }\r\n         console.log(options)\r\n         axios.request(options).then((response) => {\r\n \r\n-            console.log(response.data)\r\n+            console.log(response)\r\n \r\n //            for (var a = 0; a < response.data.rows.length(); a++) {\r\n //\r\n //                dataMetro1.push(response.data.rows[a][1]);\r\n"
                },
                {
                    "date": 1681840516589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         }\r\n         console.log(options)\r\n         axios.request(options).then((response) => {\r\n \r\n-            console.log(response)\r\n+            console.log(response.data.rows.V1)\r\n \r\n //            for (var a = 0; a < response.data.rows.length(); a++) {\r\n //\r\n //                dataMetro1.push(response.data.rows[a][1]);\r\n"
                },
                {
                    "date": 1681840535610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         }\r\n         console.log(options)\r\n         axios.request(options).then((response) => {\r\n \r\n-            console.log(response.data.rows.V1)\r\n+            console.log(response.data.rows)\r\n \r\n //            for (var a = 0; a < response.data.rows.length(); a++) {\r\n //\r\n //                dataMetro1.push(response.data.rows[a][1]);\r\n"
                },
                {
                    "date": 1681840547709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         }\r\n         console.log(options)\r\n         axios.request(options).then((response) => {\r\n \r\n-            console.log(response.data.rows)\r\n+            console.log(response.data.rows[0])\r\n \r\n //            for (var a = 0; a < response.data.rows.length(); a++) {\r\n //\r\n //                dataMetro1.push(response.data.rows[a][1]);\r\n"
                },
                {
                    "date": 1681840585359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,16 +77,16 @@\n         axios.request(options).then((response) => {\r\n \r\n             console.log(response.data.rows[0])\r\n \r\n-//            for (var a = 0; a < response.data.rows.length(); a++) {\r\n-//\r\n-//                dataMetro1.push(response.data.rows[a][1]);\r\n-//\r\n-//            }\r\n+            for (var a = 0; a < response.data.rows.length(); a++) {\r\n \r\n- //           console.log(dataMetro1)\r\n+                dataMetro1.push(response.data.rows[a].V1);\r\n+                \r\n+            }\r\n \r\n+            console.log(dataMetro1)\r\n+\r\n         })\r\n     }\r\n \r\n     return (\r\n@@ -99,9 +99,9 @@\n                 Please Select Metropolitan Area 1:\r\n                 <select value={metro1} onChange={e => setMetro1(e.target.value)}>\r\n                     <option>--Select Metropolitan Area--</option>\r\n                     {metroAreas.map(area =>\r\n-                      <option value={area.value}>{area.label}</option>\r\n+                        <option value={area.value}>{area.label}</option>\r\n                     )};\r\n                 </select>\r\n             </div>\r\n             <div style={{\r\n"
                },
                {
                    "date": 1681840595389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,14 +75,14 @@\n         }\r\n         console.log(options)\r\n         axios.request(options).then((response) => {\r\n \r\n-            console.log(response.data.rows[0])\r\n+            console.log(response)\r\n \r\n             for (var a = 0; a < response.data.rows.length(); a++) {\r\n \r\n                 dataMetro1.push(response.data.rows[a].V1);\r\n-                \r\n+\r\n             }\r\n \r\n             console.log(dataMetro1)\r\n \r\n"
                },
                {
                    "date": 1681840603558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n         axios.request(options).then((response) => {\r\n \r\n             console.log(response)\r\n \r\n-            for (var a = 0; a < response.data.rows.length(); a++) {\r\n+            for (var a = 0; a < response.data.rows.length; a++) {\r\n \r\n                 dataMetro1.push(response.data.rows[a].V1);\r\n \r\n             }\r\n"
                },
                {
                    "date": 1681840655341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,20 @@\n                 dataMetro1.push(response.data.rows[a].V1);\r\n \r\n             }\r\n \r\n+            for (var a = 0; a < response.data.rows.length; a++) {\r\n+\r\n+                dataMetro2.push(response.data.rows[a].V2);\r\n+\r\n+            }\r\n+\r\n+            for (var a = 0; a < response.data.rows.length; a++) {\r\n+\r\n+                dataNI.push(response.data.rows[a].INDICATOR);\r\n+\r\n+            }\r\n+\r\n             console.log(dataMetro1)\r\n \r\n         })\r\n     }\r\n"
                },
                {
                    "date": 1681840664307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n \r\n             }\r\n \r\n             console.log(dataMetro1)\r\n+            console.log(dataNI)\r\n \r\n         })\r\n     }\r\n \r\n"
                },
                {
                    "date": 1681840703745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,15 +83,15 @@\n                 dataMetro1.push(response.data.rows[a].V1);\r\n \r\n             }\r\n \r\n-            for (var a = 0; a < response.data.rows.length; a++) {\r\n+            for (var b = 0; b < response.data.rows.length; b++) {\r\n \r\n                 dataMetro2.push(response.data.rows[a].V2);\r\n \r\n             }\r\n \r\n-            for (var a = 0; a < response.data.rows.length; a++) {\r\n+            for (var c = 0; c < response.data.rows.length; c++) {\r\n \r\n                 dataNI.push(response.data.rows[a].INDICATOR);\r\n \r\n             }\r\n"
                },
                {
                    "date": 1681840725231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,20 +83,8 @@\n                 dataMetro1.push(response.data.rows[a].V1);\r\n \r\n             }\r\n \r\n-            for (var b = 0; b < response.data.rows.length; b++) {\r\n-\r\n-                dataMetro2.push(response.data.rows[a].V2);\r\n-\r\n-            }\r\n-\r\n-            for (var c = 0; c < response.data.rows.length; c++) {\r\n-\r\n-                dataNI.push(response.data.rows[a].INDICATOR);\r\n-\r\n-            }\r\n-\r\n             console.log(dataMetro1)\r\n             console.log(dataNI)\r\n \r\n         })\r\n"
                },
                {
                    "date": 1681840836155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,10 +77,12 @@\n         axios.request(options).then((response) => {\r\n \r\n             console.log(response)\r\n \r\n-            for (var a = 0; a < response.data.rows.length; a++) {\r\n+            var length = response.data.rows.length\r\n \r\n+            for (var a = 0; a < ; a++) {\r\n+\r\n                 dataMetro1.push(response.data.rows[a].V1);\r\n \r\n             }\r\n \r\n"
                },
                {
                    "date": 1681840842081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             console.log(response)\r\n \r\n             var length = response.data.rows.length\r\n \r\n-            for (var a = 0; a < ; a++) {\r\n+            for (var a = 0; a < length; a++) {\r\n \r\n                 dataMetro1.push(response.data.rows[a].V1);\r\n \r\n             }\r\n"
                },
                {
                    "date": 1681841008720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,20 @@\n                 dataMetro1.push(response.data.rows[a].V1);\r\n \r\n             }\r\n \r\n+            for (var a = 0; a < length; a++) {\r\n+\r\n+                dataMetro2.push(response.data.rows[a].V2);\r\n+\r\n+            }\r\n+\r\n+            for (var a = 0; a < length; a++) {\r\n+\r\n+                dataNI.push(response.data.rows[a].INDICATOR);\r\n+\r\n+            }\r\n+\r\n             console.log(dataMetro1)\r\n             console.log(dataNI)\r\n \r\n         })\r\n"
                },
                {
                    "date": 1681841093933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n import Button from 'react-bootstrap/Button'\r\n import { LineChartComp } from './LineChartComp';\r\n \r\n var dataMetro1 = [];\r\n-var dataMetro2;\r\n-var dataNI;\r\n+var dataMetro2 = [];\r\n+var dataNI = [];\r\n \r\n function MetropolitanAreas() {\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n"
                },
                {
                    "date": 1681841107617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,11 +97,8 @@\n                 dataNI.push(response.data.rows[a].INDICATOR);\r\n \r\n             }\r\n \r\n-            console.log(dataMetro1)\r\n-            console.log(dataNI)\r\n-\r\n         })\r\n     }\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1681841128850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,10 @@\n \r\n         })\r\n     }\r\n \r\n+    \r\n+\r\n     return (\r\n         <>\r\n             <div style={{\r\n                 top: \"100%\",\r\n"
                },
                {
                    "date": 1681841232373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n import { LineChartComp } from './LineChartComp';\r\n+import {faker} from '@faker-js/faker';\r\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n@@ -97,13 +98,34 @@\n                 dataNI.push(response.data.rows[a].INDICATOR);\r\n \r\n             }\r\n \r\n+            const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\r\n+\r\n+\r\n+            const data = {\r\n+                labels,\r\n+                datasets: [\r\n+                  {\r\n+                    label: 'Dataset 1',\r\n+                    data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n+                    borderColor: 'rgb(255, 99, 132)',\r\n+                    backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n+                    yAxisID: 'y',\r\n+                  },\r\n+                  {\r\n+                    label: 'Dataset 2',\r\n+                    data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n+                    borderColor: 'rgb(53, 162, 235)',\r\n+                    backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+                    yAxisID: 'y1',\r\n+                  },\r\n+                ],\r\n+              };\r\n+\r\n         })\r\n     }\r\n \r\n-    \r\n-\r\n     return (\r\n         <>\r\n             <div style={{\r\n                 top: \"100%\",\r\n"
                },
                {
                    "date": 1681841315196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,19 +105,26 @@\n             const data = {\r\n                 labels,\r\n                 datasets: [\r\n                   {\r\n-                    label: 'Dataset 1',\r\n-                    data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n+                    label: 'Metropolitan Area 1',\r\n+                    data: dataMetro1,\r\n                     borderColor: 'rgb(255, 99, 132)',\r\n                     backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n                     yAxisID: 'y',\r\n                   },\r\n                   {\r\n-                    label: 'Dataset 2',\r\n-                    data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n+                    label: 'Metropolitan Area 2',\r\n+                    data: dataMetro2,\r\n                     borderColor: 'rgb(53, 162, 235)',\r\n                     backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+                    yAxisID: 'y',\r\n+                  },\r\n+                  {\r\n+                    label: 'National Indicator',\r\n+                    data: dataNI,\r\n+                    borderColor: 'rgb(53, 162, 235)',\r\n+                    backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                     yAxisID: 'y1',\r\n                   },\r\n                 ],\r\n               };\r\n"
                },
                {
                    "date": 1681841322434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n                   },\r\n                   {\r\n                     label: 'National Indicator',\r\n                     data: dataNI,\r\n-                    borderColor: 'rgb(53, 162, 235)',\r\n+                    borderColor: 'rgb(100, 162, 235)',\r\n                     backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                     yAxisID: 'y1',\r\n                   },\r\n                 ],\r\n"
                },
                {
                    "date": 1681842054314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,10 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n-            <LineChartComp></LineChartComp>\r\n+\r\n+            <LineChartComp (data)></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681842067398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n \r\n-            <LineChartComp (data)></LineChartComp>\r\n+            <LineChartComp></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681842104944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n \r\n-            <LineChartComp></LineChartComp>\r\n+            <LineChartComp data={data}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681842489612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n             const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\r\n \r\n \r\n-            const data = {\r\n+            const updatedData = {\r\n                 labels,\r\n                 datasets: [\r\n                   {\r\n                     label: 'Metropolitan Area 1',\r\n@@ -202,9 +202,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n \r\n-            <LineChartComp data={data}></LineChartComp>\r\n+            <LineChartComp data={updatedData}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681842508054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n+const updatedData = {};\r\n \r\n function MetropolitanAreas() {\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n"
                },
                {
                    "date": 1681842584697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n-\r\n+            console.log(updatedData)\r\n             <LineChartComp data={updatedData}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n"
                },
                {
                    "date": 1681842590706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n             console.log(updatedData)\r\n-            <LineChartComp data={updatedData}></LineChartComp>\r\n+            //<LineChartComp data={updatedData}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681842612377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,8 +129,10 @@\n                   },\r\n                 ],\r\n               };\r\n \r\n+              console.log(updatedData)\r\n+\r\n         })\r\n     }\r\n \r\n     return (\r\n@@ -202,9 +204,9 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n-            console.log(updatedData)\r\n+            \r\n             //<LineChartComp data={updatedData}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n"
                },
                {
                    "date": 1681842771837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n             \r\n-            //<LineChartComp data={updatedData}></LineChartComp>\r\n+            <LineChartComp data={updatedData}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681842984992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n                 dataNI.push(response.data.rows[a].INDICATOR);\r\n \r\n             }\r\n \r\n-            const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\r\n+            const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n \r\n             const updatedData = {\r\n                 labels,\r\n"
                },
                {
                    "date": 1681843289487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import { LineChartComp } from './LineChartComp';\r\n+import LineChartComp from './LineChartComp';\r\n import {faker} from '@faker-js/faker';\r\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n"
                },
                {
                    "date": 1681843697750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n                     data: dataNI,\r\n                     borderColor: 'rgb(100, 162, 235)',\r\n                     backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                     yAxisID: 'y1',\r\n-                  },\r\n+                  }\r\n                 ],\r\n               };\r\n \r\n               console.log(updatedData)\r\n"
                },
                {
                    "date": 1681843726799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n                     borderColor: 'rgb(100, 162, 235)',\r\n                     backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                     yAxisID: 'y1',\r\n                   }\r\n-                ],\r\n+                ]\r\n               };\r\n \r\n               console.log(updatedData)\r\n \r\n"
                },
                {
                    "date": 1681843960020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,10 @@\n                     data: dataNI,\r\n                     borderColor: 'rgb(100, 162, 235)',\r\n                     backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                     yAxisID: 'y1',\r\n-                  }\r\n-                ]\r\n+                  },\r\n+                ],\r\n               };\r\n \r\n               console.log(updatedData)\r\n \r\n"
                },
                {
                    "date": 1681844236581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n \r\n             const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n \r\n-            const updatedData = {\r\n+            const bruh = {\r\n                 labels,\r\n                 datasets: [\r\n                   {\r\n                     label: 'Metropolitan Area 1',\r\n@@ -129,9 +129,27 @@\n                   },\r\n                 ],\r\n               };\r\n \r\n-              console.log(updatedData)\r\n+               updatedData = {\r\n+                labels,\r\n+                datasets: [\r\n+                  {\r\n+                    label: \"Dataset 1\",\r\n+                    data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n+                    borderColor: \"rgb(255, 99, 132)\",\r\n+                    backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n+                    yAxisID: \"y\"\r\n+                  },\r\n+                  {\r\n+                    label: \"Dataset 2\",\r\n+                    data: [1, 2, 3, 4, 5, 6],\r\n+                    borderColor: \"rgb(53, 162, 235)\",\r\n+                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n+                    yAxisID: \"y1\"\r\n+                  }\r\n+                ]\r\n+              };\r\n \r\n         })\r\n     }\r\n \r\n"
                },
                {
                    "date": 1681844245218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n-const updatedData = {};\r\n+var updatedData = {};\r\n \r\n function MetropolitanAreas() {\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n"
                },
                {
                    "date": 1681844496467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n             \r\n-            <LineChartComp data={updatedData}></LineChartComp>\r\n+            <LineChartComp data={[0,1,2,3,4,5]}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681844794516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n             \r\n-            <LineChartComp data={[0,1,2,3,4,5]}></LineChartComp>\r\n+            <LineChartComp data={[0,1,2,3,4,5]} redraw={true}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681844805930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n             \r\n-            <LineChartComp data={[0,1,2,3,4,5]} redraw={true}></LineChartComp>\r\n+            <LineChartComp></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681845310652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import LineChartComp from './LineChartComp';\r\n+import {LineChartComp} from './LineChartComp';\r\n import {faker} from '@faker-js/faker';\r\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n"
                },
                {
                    "date": 1681845315721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import {LineChartComp} from './LineChartComp';\r\n+import LineChartComp from './LineChartComp';\r\n import {faker} from '@faker-js/faker';\r\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n"
                },
                {
                    "date": 1681845855593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,17 @@\n+import  React from 'react'\r\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n import LineChartComp from './LineChartComp';\r\n import {faker} from '@faker-js/faker';\r\n \r\n+class MetroAreas extends React.Component {\r\n+\r\n+\r\n+\r\n+}\r\n+\r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n var updatedData = {};\r\n"
                },
                {
                    "date": 1681845889418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,17 @@\n import {faker} from '@faker-js/faker';\r\n \r\n class MetroAreas extends React.Component {\r\n \r\n+    constructor() {\r\n \r\n+        super();\r\n+        this.state = {\r\n+            chartData: {}\r\n+        }\r\n \r\n+    }\r\n+\r\n }\r\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n"
                },
                {
                    "date": 1681845899198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         this.state = {\r\n             chartData: {}\r\n         }\r\n \r\n-    }\r\n+    };\r\n \r\n }\r\n \r\n var dataMetro1 = [];\r\n"
                },
                {
                    "date": 1681845908566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         this.state = {\r\n             chartData: {}\r\n         }\r\n \r\n-    };\r\n+    }\r\n \r\n }\r\n \r\n var dataMetro1 = [];\r\n"
                },
                {
                    "date": 1681845949894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,13 @@\n     }\r\n \r\n }\r\n \r\n+function getChartData() {\r\n+\r\n+\r\n+}\r\n+\r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n var updatedData = {};\r\n"
                },
                {
                    "date": 1681845986249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,236 +15,238 @@\n         }\r\n \r\n     }\r\n \r\n-}\r\n+    function getChartData() {\r\n \r\n-function getChartData() {\r\n-\r\n-\r\n-}\r\n-\r\n-var dataMetro1 = [];\r\n-var dataMetro2 = [];\r\n-var dataNI = [];\r\n-var updatedData = {};\r\n-\r\n-function MetropolitanAreas() {\r\n-    const metroAreas = [\r\n-        { value: \"35620\", label: \"New York, NY\" },\r\n-        { value: '31080', label: \"Los Angeles, CA\" },\r\n-        { value: \"16980\", label: \"Chicago, IL\" },\r\n-        { value: \"19100\", label: \"Dallas, TX\" },\r\n-        { value: \"37980\", label: \"Philadelphia, PA\" },\r\n-        { value: \"26420\", label: \"Houston, TX\" },\r\n-        { value: '47900', label: \"Washington, DC\" },\r\n-        { value: \"33100\", label: \"Miami, FL\" },\r\n-        { value: \"12060\", label: \"Atlanta, GA\" },\r\n-        { value: \"14460\", label: \"Boston, MA\" },\r\n-        { value: \"41860\", label: \"San Francisco, CA\" },\r\n-        { value: \"19820\", label: \"Detroit, MI\" },\r\n-        { value: \"38060\", label: \"Phoenix, AZ\" },\r\n-        { value: \"42660\", label: \"Seattle, WA\" },\r\n-        { value: \"40140\", label: \"Riverside, CA\" },\r\n-    ];\r\n-\r\n-    const ahs_attributes = [\r\n-        { label: \"Household Rating\", value: \"RATINGHS\" },\r\n-        { label: \"Neighborhood Rating\", value: \"RATINGNH\" },\r\n-        { label: \"Family Income\", value: \"FINCP\" },\r\n-        { label: \"Resident's Income\", value: \"HINCP\" },\r\n-        { label: \"Resident's Age\", value: \"HHAGE\" },\r\n-        { label: 'Property Value', value: \"MARKETVAL\" },\r\n-        { label: \"Monthly Mortgage\", value: \"MORTAMT\" },\r\n-        { label: \"Monthly Rent\", value: \"RENT\" },\r\n-        { label: \"Year Built\", value: \"YRBUILT\" },\r\n-        { label: \"Unit Size\", value: \"UNITSIZE\" },\r\n-        { label: \"No Access To Water\", value: \"NOWAT\" },\r\n-        { label: \"Monthly Home Expenses\", value: \"TOTHCAMT\" },\r\n-        { label: \"Total Rooms\", value: \"TOTROOMS\" },\r\n-        { label: \"Rent Control Present\", value: \"RENTCNTRL\" },\r\n-        { label: \"Number of Inhabitants\", value: \"NUMPEOPLE\" },\r\n-    ]\r\n-\r\n-    const nat_indicators = [\r\n-        { label: \"Inflation Rate\", value: \"INFLATION\" },\r\n-        { label: \"CCI\", value: \"CCI\" },\r\n-        { label: 'Federal Interest Rate', value: \"INTRATE\" },\r\n-        { label: \"GDP\", value: \"GDP\" },\r\n-        { label: \"Employment Rate\", value: \"EMPRATE\" },\r\n-        { label: \"Bond Yield\", value: \"BONDYIELD\" },\r\n-    ]\r\n-\r\n-    const [metro1, setMetro1] = useState();\r\n-    const [metro2, setMetro2] = useState();\r\n-    const [ahsSelection, setAHSSelection] = useState();\r\n-    const [natSelection, setNatSelection] = useState();\r\n-    const [statSelection, setStatSelection] = useState();\r\n-\r\n-    const [data, setData] = useState([])\r\n-\r\n-    const getData = () => {\r\n-        const options = {\r\n-            method: 'GET',\r\n-            url: 'http://localhost:8080/MetroAreas',\r\n-            params: {\r\n-                X: ahsSelection,\r\n-                Y: natSelection,\r\n-                Z: metro1,\r\n-                H: metro2,\r\n-                statistic: statSelection\r\n-            },\r\n+        this\r\n+    \r\n+    }\r\n+    \r\n+    var dataMetro1 = [];\r\n+    var dataMetro2 = [];\r\n+    var dataNI = [];\r\n+    var updatedData = {};\r\n+    \r\n+    function MetropolitanAreas() {\r\n+        const metroAreas = [\r\n+            { value: \"35620\", label: \"New York, NY\" },\r\n+            { value: '31080', label: \"Los Angeles, CA\" },\r\n+            { value: \"16980\", label: \"Chicago, IL\" },\r\n+            { value: \"19100\", label: \"Dallas, TX\" },\r\n+            { value: \"37980\", label: \"Philadelphia, PA\" },\r\n+            { value: \"26420\", label: \"Houston, TX\" },\r\n+            { value: '47900', label: \"Washington, DC\" },\r\n+            { value: \"33100\", label: \"Miami, FL\" },\r\n+            { value: \"12060\", label: \"Atlanta, GA\" },\r\n+            { value: \"14460\", label: \"Boston, MA\" },\r\n+            { value: \"41860\", label: \"San Francisco, CA\" },\r\n+            { value: \"19820\", label: \"Detroit, MI\" },\r\n+            { value: \"38060\", label: \"Phoenix, AZ\" },\r\n+            { value: \"42660\", label: \"Seattle, WA\" },\r\n+            { value: \"40140\", label: \"Riverside, CA\" },\r\n+        ];\r\n+    \r\n+        const ahs_attributes = [\r\n+            { label: \"Household Rating\", value: \"RATINGHS\" },\r\n+            { label: \"Neighborhood Rating\", value: \"RATINGNH\" },\r\n+            { label: \"Family Income\", value: \"FINCP\" },\r\n+            { label: \"Resident's Income\", value: \"HINCP\" },\r\n+            { label: \"Resident's Age\", value: \"HHAGE\" },\r\n+            { label: 'Property Value', value: \"MARKETVAL\" },\r\n+            { label: \"Monthly Mortgage\", value: \"MORTAMT\" },\r\n+            { label: \"Monthly Rent\", value: \"RENT\" },\r\n+            { label: \"Year Built\", value: \"YRBUILT\" },\r\n+            { label: \"Unit Size\", value: \"UNITSIZE\" },\r\n+            { label: \"No Access To Water\", value: \"NOWAT\" },\r\n+            { label: \"Monthly Home Expenses\", value: \"TOTHCAMT\" },\r\n+            { label: \"Total Rooms\", value: \"TOTROOMS\" },\r\n+            { label: \"Rent Control Present\", value: \"RENTCNTRL\" },\r\n+            { label: \"Number of Inhabitants\", value: \"NUMPEOPLE\" },\r\n+        ]\r\n+    \r\n+        const nat_indicators = [\r\n+            { label: \"Inflation Rate\", value: \"INFLATION\" },\r\n+            { label: \"CCI\", value: \"CCI\" },\r\n+            { label: 'Federal Interest Rate', value: \"INTRATE\" },\r\n+            { label: \"GDP\", value: \"GDP\" },\r\n+            { label: \"Employment Rate\", value: \"EMPRATE\" },\r\n+            { label: \"Bond Yield\", value: \"BONDYIELD\" },\r\n+        ]\r\n+    \r\n+        const [metro1, setMetro1] = useState();\r\n+        const [metro2, setMetro2] = useState();\r\n+        const [ahsSelection, setAHSSelection] = useState();\r\n+        const [natSelection, setNatSelection] = useState();\r\n+        const [statSelection, setStatSelection] = useState();\r\n+    \r\n+        const [data, setData] = useState([])\r\n+    \r\n+        const getData = () => {\r\n+            const options = {\r\n+                method: 'GET',\r\n+                url: 'http://localhost:8080/MetroAreas',\r\n+                params: {\r\n+                    X: ahsSelection,\r\n+                    Y: natSelection,\r\n+                    Z: metro1,\r\n+                    H: metro2,\r\n+                    statistic: statSelection\r\n+                },\r\n+            }\r\n+            console.log(options)\r\n+            axios.request(options).then((response) => {\r\n+    \r\n+                console.log(response)\r\n+    \r\n+                var length = response.data.rows.length\r\n+    \r\n+                for (var a = 0; a < length; a++) {\r\n+    \r\n+                    dataMetro1.push(response.data.rows[a].V1);\r\n+    \r\n+                }\r\n+    \r\n+                for (var a = 0; a < length; a++) {\r\n+    \r\n+                    dataMetro2.push(response.data.rows[a].V2);\r\n+    \r\n+                }\r\n+    \r\n+                for (var a = 0; a < length; a++) {\r\n+    \r\n+                    dataNI.push(response.data.rows[a].INDICATOR);\r\n+    \r\n+                }\r\n+    \r\n+                const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+    \r\n+    \r\n+                const bruh = {\r\n+                    labels,\r\n+                    datasets: [\r\n+                      {\r\n+                        label: 'Metropolitan Area 1',\r\n+                        data: dataMetro1,\r\n+                        borderColor: 'rgb(255, 99, 132)',\r\n+                        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n+                        yAxisID: 'y',\r\n+                      },\r\n+                      {\r\n+                        label: 'Metropolitan Area 2',\r\n+                        data: dataMetro2,\r\n+                        borderColor: 'rgb(53, 162, 235)',\r\n+                        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+                        yAxisID: 'y',\r\n+                      },\r\n+                      {\r\n+                        label: 'National Indicator',\r\n+                        data: dataNI,\r\n+                        borderColor: 'rgb(100, 162, 235)',\r\n+                        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+                        yAxisID: 'y1',\r\n+                      },\r\n+                    ],\r\n+                  };\r\n+    \r\n+                   updatedData = {\r\n+                    labels,\r\n+                    datasets: [\r\n+                      {\r\n+                        label: \"Dataset 1\",\r\n+                        data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n+                        borderColor: \"rgb(255, 99, 132)\",\r\n+                        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n+                        yAxisID: \"y\"\r\n+                      },\r\n+                      {\r\n+                        label: \"Dataset 2\",\r\n+                        data: [1, 2, 3, 4, 5, 6],\r\n+                        borderColor: \"rgb(53, 162, 235)\",\r\n+                        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n+                        yAxisID: \"y1\"\r\n+                      }\r\n+                    ]\r\n+                  };\r\n+    \r\n+            })\r\n         }\r\n-        console.log(options)\r\n-        axios.request(options).then((response) => {\r\n\\ No newline at end of file\n-\r\n-            console.log(response)\r\n-\r\n-            var length = response.data.rows.length\r\n-\r\n-            for (var a = 0; a < length; a++) {\r\n-\r\n-                dataMetro1.push(response.data.rows[a].V1);\r\n-\r\n-            }\r\n-\r\n-            for (var a = 0; a < length; a++) {\r\n-\r\n-                dataMetro2.push(response.data.rows[a].V2);\r\n-\r\n-            }\r\n-\r\n-            for (var a = 0; a < length; a++) {\r\n-\r\n-                dataNI.push(response.data.rows[a].INDICATOR);\r\n-\r\n-            }\r\n-\r\n-            const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n-\r\n-\r\n-            const bruh = {\r\n-                labels,\r\n-                datasets: [\r\n-                  {\r\n-                    label: 'Metropolitan Area 1',\r\n-                    data: dataMetro1,\r\n-                    borderColor: 'rgb(255, 99, 132)',\r\n-                    backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n-                    yAxisID: 'y',\r\n-                  },\r\n-                  {\r\n-                    label: 'Metropolitan Area 2',\r\n-                    data: dataMetro2,\r\n-                    borderColor: 'rgb(53, 162, 235)',\r\n-                    backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n-                    yAxisID: 'y',\r\n-                  },\r\n-                  {\r\n-                    label: 'National Indicator',\r\n-                    data: dataNI,\r\n-                    borderColor: 'rgb(100, 162, 235)',\r\n-                    backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n-                    yAxisID: 'y1',\r\n-                  },\r\n-                ],\r\n-              };\r\n-\r\n-               updatedData = {\r\n-                labels,\r\n-                datasets: [\r\n-                  {\r\n-                    label: \"Dataset 1\",\r\n-                    data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n-                    borderColor: \"rgb(255, 99, 132)\",\r\n-                    backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n-                    yAxisID: \"y\"\r\n-                  },\r\n-                  {\r\n-                    label: \"Dataset 2\",\r\n-                    data: [1, 2, 3, 4, 5, 6],\r\n-                    borderColor: \"rgb(53, 162, 235)\",\r\n-                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n-                    yAxisID: \"y1\"\r\n-                  }\r\n-                ]\r\n-              };\r\n-\r\n-        })\r\n+    \r\n+        return (\r\n+            <>\r\n+                <div style={{\r\n+                    top: \"100%\",\r\n+                    left: \"15%\",\r\n+                    fontWeight: \"bold\"\r\n+                }}>\r\n+                    Please Select Metropolitan Area 1:\r\n+                    <select value={metro1} onChange={e => setMetro1(e.target.value)}>\r\n+                        <option>--Select Metropolitan Area--</option>\r\n+                        {metroAreas.map(area =>\r\n+                            <option value={area.value}>{area.label}</option>\r\n+                        )};\r\n+                    </select>\r\n+                </div>\r\n+                <div style={{\r\n+                    top: \"100%\",\r\n+                    left: \"15%\",\r\n+                    fontWeight: \"bold\"\r\n+                }}>\r\n+                    Please Select Metropolitan Area 2:\r\n+                    <select value={metro2} onChange={e => setMetro2(e.target.value)}>\r\n+                        <option>--Select Metropolitan Area--</option>\r\n+                        {metroAreas.map(area =>\r\n+                            <option value={area.value}>{area.label}</option>\r\n+                        )};\r\n+                    </select>\r\n+                </div>\r\n+                <div style={{\r\n+                    top: \"100%\",\r\n+                    left: \"15%\",\r\n+                    fontWeight: \"bold\"\r\n+                }}>\r\n+                    Please Select a Household Attribute:\r\n+                    <select value={ahsSelection} onChange={e => setAHSSelection(e.target.value)}>\r\n+                        <option>--Select Household Attribute--</option>\r\n+                        {ahs_attributes.map(attribute =>\r\n+                            <option value={attribute.value}>{attribute.label}</option>\r\n+                        )};\r\n+                    </select>\r\n+                </div>\r\n+                <div style={{\r\n+                    top: \"100%\",\r\n+                    left: \"15%\",\r\n+                    fontWeight: \"bold\"\r\n+                }}>\r\n+                    Please Select a National Indicator:\r\n+                    <select value={natSelection} onChange={e => setNatSelection(e.target.value)}>\r\n+                        <option>--Select National Indicator--</option>\r\n+                        {nat_indicators.map(indicator =>\r\n+                            <option value={indicator.value}>{indicator.label}</option>\r\n+                        )};\r\n+                    </select>\r\n+                </div>\r\n+                <div style={{\r\n+                    top: \"100%\",\r\n+                    left: \"15%\",\r\n+                    fontWeight: \"bold\"\r\n+                }}>\r\n+                    Select a Statistical Measure:\r\n+                    <select value={statSelection} onChange={e => setStatSelection(e.target.value)}>\r\n+                        <option>--Statistical Measure--</option>\r\n+                        <option value=\"Average\">Mean</option>\r\n+                        <option value=\"Median\">Median</option>\r\n+                        <option value='Lower Quartile'>Lower Quartile</option>\r\n+                        <option value=\"Upper Quartile\">Upper Quartile</option>\r\n+                    </select>\r\n+                </div>\r\n+                <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n+                <p>{data}</p>\r\n+                \r\n+                <LineChartComp></LineChartComp>\r\n+            </>\r\n+        )\r\n     }\r\n+    export default MetropolitanAreas\r\n \r\n-    return (\r\n-        <>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Please Select Metropolitan Area 1:\r\n-                <select value={metro1} onChange={e => setMetro1(e.target.value)}>\r\n-                    <option>--Select Metropolitan Area--</option>\r\n-                    {metroAreas.map(area =>\r\n-                        <option value={area.value}>{area.label}</option>\r\n-                    )};\r\n-                </select>\r\n-            </div>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Please Select Metropolitan Area 2:\r\n-                <select value={metro2} onChange={e => setMetro2(e.target.value)}>\r\n-                    <option>--Select Metropolitan Area--</option>\r\n-                    {metroAreas.map(area =>\r\n-                        <option value={area.value}>{area.label}</option>\r\n-                    )};\r\n-                </select>\r\n-            </div>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Please Select a Household Attribute:\r\n-                <select value={ahsSelection} onChange={e => setAHSSelection(e.target.value)}>\r\n-                    <option>--Select Household Attribute--</option>\r\n-                    {ahs_attributes.map(attribute =>\r\n-                        <option value={attribute.value}>{attribute.label}</option>\r\n-                    )};\r\n-                </select>\r\n-            </div>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Please Select a National Indicator:\r\n-                <select value={natSelection} onChange={e => setNatSelection(e.target.value)}>\r\n-                    <option>--Select National Indicator--</option>\r\n-                    {nat_indicators.map(indicator =>\r\n-                        <option value={indicator.value}>{indicator.label}</option>\r\n-                    )};\r\n-                </select>\r\n-            </div>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Select a Statistical Measure:\r\n-                <select value={statSelection} onChange={e => setStatSelection(e.target.value)}>\r\n-                    <option>--Statistical Measure--</option>\r\n-                    <option value=\"Average\">Mean</option>\r\n-                    <option value=\"Median\">Median</option>\r\n-                    <option value='Lower Quartile'>Lower Quartile</option>\r\n-                    <option value=\"Upper Quartile\">Upper Quartile</option>\r\n-                </select>\r\n-            </div>\r\n-            <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n-            <p>{data}</p>\r\n-            \r\n-            <LineChartComp></LineChartComp>\r\n-        </>\r\n-    )\r\n }\r\n-export default MetropolitanAreas\n+\r\n"
                },
                {
                    "date": 1681845994145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,8 +245,10 @@\n                 <LineChartComp></LineChartComp>\r\n             </>\r\n         )\r\n     }\r\n-    export default MetropolitanAreas\r\n \r\n+\r\n }\r\n \r\n+export default MetropolitanAreas\r\n+\r\n"
                },
                {
                    "date": 1681846001784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         }\r\n \r\n     }\r\n \r\n-    function getChartData() {\r\n+    getChartData() {\r\n \r\n         this\r\n     \r\n     }\r\n"
                },
                {
                    "date": 1681846013963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,12 @@\n         this\r\n     \r\n     }\r\n     \r\n-    var dataMetro1 = [];\r\n-    var dataMetro2 = [];\r\n-    var dataNI = [];\r\n-    var updatedData = {};\r\n+    dataMetro1 = [];\r\n+    dataMetro2 = [];\r\n+    dataNI = [];\r\n+    updatedData = {};\r\n     \r\n     function MetropolitanAreas() {\r\n         const metroAreas = [\r\n             { value: \"35620\", label: \"New York, NY\" },\r\n"
                },
                {
                    "date": 1681846217000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n-import  React from 'react'\r\n+import React from 'react'\r\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n import LineChartComp from './LineChartComp';\r\n-import {faker} from '@faker-js/faker';\r\n+import { faker } from '@faker-js/faker';\r\n \r\n class MetroAreas extends React.Component {\r\n \r\n     constructor() {\r\n@@ -17,238 +17,257 @@\n     }\r\n \r\n     getChartData() {\r\n \r\n-        this\r\n-    \r\n+        this.setState({\r\n+            labels: ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+            chartData: {\r\n+                labels,\r\n+                datasets: [\r\n+                    {\r\n+                        label: \"Dataset 1\",\r\n+                        data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n+                        borderColor: \"rgb(255, 99, 132)\",\r\n+                        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n+                        yAxisID: \"y\"\r\n+                    },\r\n+                    {\r\n+                        label: \"Dataset 2\",\r\n+                        data: [0, 1, 2, 3, 4, 5],\r\n+                        borderColor: \"rgb(53, 162, 235)\",\r\n+                        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n+                        yAxisID: \"y1\"\r\n+                    }\r\n+                ]\r\n+            };\r\n+\r\n+        })\r\n+\r\n     }\r\n-    \r\n-    dataMetro1 = [];\r\n-    dataMetro2 = [];\r\n-    dataNI = [];\r\n-    updatedData = {};\r\n-    \r\n-    function MetropolitanAreas() {\r\n-        const metroAreas = [\r\n-            { value: \"35620\", label: \"New York, NY\" },\r\n-            { value: '31080', label: \"Los Angeles, CA\" },\r\n-            { value: \"16980\", label: \"Chicago, IL\" },\r\n-            { value: \"19100\", label: \"Dallas, TX\" },\r\n-            { value: \"37980\", label: \"Philadelphia, PA\" },\r\n-            { value: \"26420\", label: \"Houston, TX\" },\r\n-            { value: '47900', label: \"Washington, DC\" },\r\n-            { value: \"33100\", label: \"Miami, FL\" },\r\n-            { value: \"12060\", label: \"Atlanta, GA\" },\r\n-            { value: \"14460\", label: \"Boston, MA\" },\r\n-            { value: \"41860\", label: \"San Francisco, CA\" },\r\n-            { value: \"19820\", label: \"Detroit, MI\" },\r\n-            { value: \"38060\", label: \"Phoenix, AZ\" },\r\n-            { value: \"42660\", label: \"Seattle, WA\" },\r\n-            { value: \"40140\", label: \"Riverside, CA\" },\r\n-        ];\r\n-    \r\n-        const ahs_attributes = [\r\n-            { label: \"Household Rating\", value: \"RATINGHS\" },\r\n-            { label: \"Neighborhood Rating\", value: \"RATINGNH\" },\r\n-            { label: \"Family Income\", value: \"FINCP\" },\r\n-            { label: \"Resident's Income\", value: \"HINCP\" },\r\n-            { label: \"Resident's Age\", value: \"HHAGE\" },\r\n-            { label: 'Property Value', value: \"MARKETVAL\" },\r\n-            { label: \"Monthly Mortgage\", value: \"MORTAMT\" },\r\n-            { label: \"Monthly Rent\", value: \"RENT\" },\r\n-            { label: \"Year Built\", value: \"YRBUILT\" },\r\n-            { label: \"Unit Size\", value: \"UNITSIZE\" },\r\n-            { label: \"No Access To Water\", value: \"NOWAT\" },\r\n-            { label: \"Monthly Home Expenses\", value: \"TOTHCAMT\" },\r\n-            { label: \"Total Rooms\", value: \"TOTROOMS\" },\r\n-            { label: \"Rent Control Present\", value: \"RENTCNTRL\" },\r\n-            { label: \"Number of Inhabitants\", value: \"NUMPEOPLE\" },\r\n-        ]\r\n-    \r\n-        const nat_indicators = [\r\n-            { label: \"Inflation Rate\", value: \"INFLATION\" },\r\n-            { label: \"CCI\", value: \"CCI\" },\r\n-            { label: 'Federal Interest Rate', value: \"INTRATE\" },\r\n-            { label: \"GDP\", value: \"GDP\" },\r\n-            { label: \"Employment Rate\", value: \"EMPRATE\" },\r\n-            { label: \"Bond Yield\", value: \"BONDYIELD\" },\r\n-        ]\r\n-    \r\n-        const [metro1, setMetro1] = useState();\r\n-        const [metro2, setMetro2] = useState();\r\n-        const [ahsSelection, setAHSSelection] = useState();\r\n-        const [natSelection, setNatSelection] = useState();\r\n-        const [statSelection, setStatSelection] = useState();\r\n-    \r\n-        const [data, setData] = useState([])\r\n-    \r\n-        const getData = () => {\r\n-            const options = {\r\n-                method: 'GET',\r\n-                url: 'http://localhost:8080/MetroAreas',\r\n-                params: {\r\n-                    X: ahsSelection,\r\n-                    Y: natSelection,\r\n-                    Z: metro1,\r\n-                    H: metro2,\r\n-                    statistic: statSelection\r\n-                },\r\n+\r\n+}\r\n+\r\n+var dataMetro1 = [];\r\n+var dataMetro2 = [];\r\n+var dataNI = [];\r\n+var updatedData = {};\r\n+\r\n+function MetropolitanAreas() {\r\n+    const metroAreas = [\r\n+        { value: \"35620\", label: \"New York, NY\" },\r\n+        { value: '31080', label: \"Los Angeles, CA\" },\r\n+        { value: \"16980\", label: \"Chicago, IL\" },\r\n+        { value: \"19100\", label: \"Dallas, TX\" },\r\n+        { value: \"37980\", label: \"Philadelphia, PA\" },\r\n+        { value: \"26420\", label: \"Houston, TX\" },\r\n+        { value: '47900', label: \"Washington, DC\" },\r\n+        { value: \"33100\", label: \"Miami, FL\" },\r\n+        { value: \"12060\", label: \"Atlanta, GA\" },\r\n+        { value: \"14460\", label: \"Boston, MA\" },\r\n+        { value: \"41860\", label: \"San Francisco, CA\" },\r\n+        { value: \"19820\", label: \"Detroit, MI\" },\r\n+        { value: \"38060\", label: \"Phoenix, AZ\" },\r\n+        { value: \"42660\", label: \"Seattle, WA\" },\r\n+        { value: \"40140\", label: \"Riverside, CA\" },\r\n+    ];\r\n+\r\n+    const ahs_attributes = [\r\n+        { label: \"Household Rating\", value: \"RATINGHS\" },\r\n+        { label: \"Neighborhood Rating\", value: \"RATINGNH\" },\r\n+        { label: \"Family Income\", value: \"FINCP\" },\r\n+        { label: \"Resident's Income\", value: \"HINCP\" },\r\n+        { label: \"Resident's Age\", value: \"HHAGE\" },\r\n+        { label: 'Property Value', value: \"MARKETVAL\" },\r\n+        { label: \"Monthly Mortgage\", value: \"MORTAMT\" },\r\n+        { label: \"Monthly Rent\", value: \"RENT\" },\r\n+        { label: \"Year Built\", value: \"YRBUILT\" },\r\n+        { label: \"Unit Size\", value: \"UNITSIZE\" },\r\n+        { label: \"No Access To Water\", value: \"NOWAT\" },\r\n+        { label: \"Monthly Home Expenses\", value: \"TOTHCAMT\" },\r\n+        { label: \"Total Rooms\", value: \"TOTROOMS\" },\r\n+        { label: \"Rent Control Present\", value: \"RENTCNTRL\" },\r\n+        { label: \"Number of Inhabitants\", value: \"NUMPEOPLE\" },\r\n+    ]\r\n+\r\n+    const nat_indicators = [\r\n+        { label: \"Inflation Rate\", value: \"INFLATION\" },\r\n+        { label: \"CCI\", value: \"CCI\" },\r\n+        { label: 'Federal Interest Rate', value: \"INTRATE\" },\r\n+        { label: \"GDP\", value: \"GDP\" },\r\n+        { label: \"Employment Rate\", value: \"EMPRATE\" },\r\n+        { label: \"Bond Yield\", value: \"BONDYIELD\" },\r\n+    ]\r\n+\r\n+    const [metro1, setMetro1] = useState();\r\n+    const [metro2, setMetro2] = useState();\r\n+    const [ahsSelection, setAHSSelection] = useState();\r\n+    const [natSelection, setNatSelection] = useState();\r\n+    const [statSelection, setStatSelection] = useState();\r\n+\r\n+    const [data, setData] = useState([])\r\n+\r\n+    const getData = () => {\r\n+        const options = {\r\n+            method: 'GET',\r\n+            url: 'http://localhost:8080/MetroAreas',\r\n+            params: {\r\n+                X: ahsSelection,\r\n+                Y: natSelection,\r\n+                Z: metro1,\r\n+                H: metro2,\r\n+                statistic: statSelection\r\n+            },\r\n+        }\r\n+        console.log(options)\r\n+        axios.request(options).then((response) => {\r\n+\r\n+            console.log(response)\r\n+\r\n+            var length = response.data.rows.length\r\n+\r\n+            for (var a = 0; a < length; a++) {\r\n+\r\n+                dataMetro1.push(response.data.rows[a].V1);\r\n+\r\n             }\r\n-            console.log(options)\r\n-            axios.request(options).then((response) => {\r\n-    \r\n-                console.log(response)\r\n-    \r\n-                var length = response.data.rows.length\r\n-    \r\n-                for (var a = 0; a < length; a++) {\r\n-    \r\n-                    dataMetro1.push(response.data.rows[a].V1);\r\n-    \r\n-                }\r\n-    \r\n-                for (var a = 0; a < length; a++) {\r\n-    \r\n-                    dataMetro2.push(response.data.rows[a].V2);\r\n-    \r\n-                }\r\n-    \r\n-                for (var a = 0; a < length; a++) {\r\n-    \r\n-                    dataNI.push(response.data.rows[a].INDICATOR);\r\n-    \r\n-                }\r\n-    \r\n-                const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n-    \r\n-    \r\n-                const bruh = {\r\n-                    labels,\r\n-                    datasets: [\r\n-                      {\r\n+\r\n+            for (var a = 0; a < length; a++) {\r\n+\r\n+                dataMetro2.push(response.data.rows[a].V2);\r\n+\r\n+            }\r\n+\r\n+            for (var a = 0; a < length; a++) {\r\n+\r\n+                dataNI.push(response.data.rows[a].INDICATOR);\r\n+\r\n+            }\r\n+\r\n+            const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+\r\n+\r\n+            const bruh = {\r\n+                labels,\r\n+                datasets: [\r\n+                    {\r\n                         label: 'Metropolitan Area 1',\r\n                         data: dataMetro1,\r\n                         borderColor: 'rgb(255, 99, 132)',\r\n                         backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n                         yAxisID: 'y',\r\n-                      },\r\n-                      {\r\n+                    },\r\n+                    {\r\n                         label: 'Metropolitan Area 2',\r\n                         data: dataMetro2,\r\n                         borderColor: 'rgb(53, 162, 235)',\r\n                         backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                         yAxisID: 'y',\r\n-                      },\r\n-                      {\r\n+                    },\r\n+                    {\r\n                         label: 'National Indicator',\r\n                         data: dataNI,\r\n                         borderColor: 'rgb(100, 162, 235)',\r\n                         backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                         yAxisID: 'y1',\r\n-                      },\r\n-                    ],\r\n-                  };\r\n-    \r\n-                   updatedData = {\r\n-                    labels,\r\n-                    datasets: [\r\n-                      {\r\n+                    },\r\n+                ],\r\n+            };\r\n+\r\n+            updatedData = {\r\n+                labels,\r\n+                datasets: [\r\n+                    {\r\n                         label: \"Dataset 1\",\r\n                         data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n                         borderColor: \"rgb(255, 99, 132)\",\r\n                         backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n                         yAxisID: \"y\"\r\n-                      },\r\n-                      {\r\n+                    },\r\n+                    {\r\n                         label: \"Dataset 2\",\r\n                         data: [1, 2, 3, 4, 5, 6],\r\n                         borderColor: \"rgb(53, 162, 235)\",\r\n                         backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n                         yAxisID: \"y1\"\r\n-                      }\r\n-                    ]\r\n-                  };\r\n-    \r\n-            })\r\n-        }\r\n-    \r\n-        return (\r\n-            <>\r\n-                <div style={{\r\n-                    top: \"100%\",\r\n-                    left: \"15%\",\r\n-                    fontWeight: \"bold\"\r\n-                }}>\r\n-                    Please Select Metropolitan Area 1:\r\n-                    <select value={metro1} onChange={e => setMetro1(e.target.value)}>\r\n-                        <option>--Select Metropolitan Area--</option>\r\n-                        {metroAreas.map(area =>\r\n-                            <option value={area.value}>{area.label}</option>\r\n-                        )};\r\n-                    </select>\r\n-                </div>\r\n-                <div style={{\r\n-                    top: \"100%\",\r\n-                    left: \"15%\",\r\n-                    fontWeight: \"bold\"\r\n-                }}>\r\n-                    Please Select Metropolitan Area 2:\r\n-                    <select value={metro2} onChange={e => setMetro2(e.target.value)}>\r\n-                        <option>--Select Metropolitan Area--</option>\r\n-                        {metroAreas.map(area =>\r\n-                            <option value={area.value}>{area.label}</option>\r\n-                        )};\r\n-                    </select>\r\n-                </div>\r\n-                <div style={{\r\n-                    top: \"100%\",\r\n-                    left: \"15%\",\r\n-                    fontWeight: \"bold\"\r\n-                }}>\r\n-                    Please Select a Household Attribute:\r\n-                    <select value={ahsSelection} onChange={e => setAHSSelection(e.target.value)}>\r\n-                        <option>--Select Household Attribute--</option>\r\n-                        {ahs_attributes.map(attribute =>\r\n-                            <option value={attribute.value}>{attribute.label}</option>\r\n-                        )};\r\n-                    </select>\r\n-                </div>\r\n-                <div style={{\r\n-                    top: \"100%\",\r\n-                    left: \"15%\",\r\n-                    fontWeight: \"bold\"\r\n-                }}>\r\n-                    Please Select a National Indicator:\r\n-                    <select value={natSelection} onChange={e => setNatSelection(e.target.value)}>\r\n-                        <option>--Select National Indicator--</option>\r\n-                        {nat_indicators.map(indicator =>\r\n-                            <option value={indicator.value}>{indicator.label}</option>\r\n-                        )};\r\n-                    </select>\r\n-                </div>\r\n-                <div style={{\r\n-                    top: \"100%\",\r\n-                    left: \"15%\",\r\n-                    fontWeight: \"bold\"\r\n-                }}>\r\n-                    Select a Statistical Measure:\r\n-                    <select value={statSelection} onChange={e => setStatSelection(e.target.value)}>\r\n-                        <option>--Statistical Measure--</option>\r\n-                        <option value=\"Average\">Mean</option>\r\n-                        <option value=\"Median\">Median</option>\r\n-                        <option value='Lower Quartile'>Lower Quartile</option>\r\n-                        <option value=\"Upper Quartile\">Upper Quartile</option>\r\n-                    </select>\r\n-                </div>\r\n-                <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n-                <p>{data}</p>\r\n-                \r\n-                <LineChartComp></LineChartComp>\r\n-            </>\r\n-        )\r\n+                    }\r\n+                ]\r\n+            };\r\n+\r\n+        })\r\n     }\r\n \r\n+    return (\r\n+        <>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Please Select Metropolitan Area 1:\r\n+                <select value={metro1} onChange={e => setMetro1(e.target.value)}>\r\n+                    <option>--Select Metropolitan Area--</option>\r\n+                    {metroAreas.map(area =>\r\n+                        <option value={area.value}>{area.label}</option>\r\n+                    )};\r\n+                </select>\r\n+            </div>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Please Select Metropolitan Area 2:\r\n+                <select value={metro2} onChange={e => setMetro2(e.target.value)}>\r\n+                    <option>--Select Metropolitan Area--</option>\r\n+                    {metroAreas.map(area =>\r\n+                        <option value={area.value}>{area.label}</option>\r\n+                    )};\r\n+                </select>\r\n+            </div>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Please Select a Household Attribute:\r\n+                <select value={ahsSelection} onChange={e => setAHSSelection(e.target.value)}>\r\n+                    <option>--Select Household Attribute--</option>\r\n+                    {ahs_attributes.map(attribute =>\r\n+                        <option value={attribute.value}>{attribute.label}</option>\r\n+                    )};\r\n+                </select>\r\n+            </div>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Please Select a National Indicator:\r\n+                <select value={natSelection} onChange={e => setNatSelection(e.target.value)}>\r\n+                    <option>--Select National Indicator--</option>\r\n+                    {nat_indicators.map(indicator =>\r\n+                        <option value={indicator.value}>{indicator.label}</option>\r\n+                    )};\r\n+                </select>\r\n+            </div>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Select a Statistical Measure:\r\n+                <select value={statSelection} onChange={e => setStatSelection(e.target.value)}>\r\n+                    <option>--Statistical Measure--</option>\r\n+                    <option value=\"Average\">Mean</option>\r\n+                    <option value=\"Median\">Median</option>\r\n+                    <option value='Lower Quartile'>Lower Quartile</option>\r\n+                    <option value=\"Upper Quartile\">Upper Quartile</option>\r\n+                </select>\r\n+            </div>\r\n+            <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n+            <p>{data}</p>\r\n \r\n+            <LineChartComp></LineChartComp>\r\n+        </>\r\n+    )\r\n }\r\n-\r\n-export default MetropolitanAreas\r\n-\r\n+export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681846232774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n     getChartData() {\r\n \r\n         this.setState({\r\n-            labels: ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+            labels: ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021']\r\n             chartData: {\r\n                 labels,\r\n                 datasets: [\r\n                     {\r\n@@ -37,9 +37,9 @@\n                         backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n                         yAxisID: \"y1\"\r\n                     }\r\n                 ]\r\n-            };\r\n+            }\r\n \r\n         })\r\n \r\n     }\r\n"
                },
                {
                    "date": 1681846292870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,12 +17,13 @@\n     }\r\n \r\n     getChartData() {\r\n \r\n+\r\n+\r\n         this.setState({\r\n-            labels: ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021']\r\n             chartData: {\r\n-                labels,\r\n+                labels: ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'],,\r\n                 datasets: [\r\n                     {\r\n                         label: \"Dataset 1\",\r\n                         data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n"
                },
                {
                    "date": 1681846311743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,13 +21,13 @@\n \r\n \r\n         this.setState({\r\n             chartData: {\r\n-                labels: ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'],,\r\n+                labels: ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'],\r\n                 datasets: [\r\n                     {\r\n                         label: \"Dataset 1\",\r\n-                        data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n+                        data: [5, 4, 3, 2, 1],\r\n                         borderColor: \"rgb(255, 99, 132)\",\r\n                         backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n                         yAxisID: \"y\"\r\n                     },\r\n"
                },
                {
                    "date": 1681846349814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,14 @@\n         }\r\n \r\n     }\r\n \r\n+    componentWillMount() {\r\n+        this.getChartData();\r\n+    }\r\n+\r\n     getChartData() {\r\n \r\n-\r\n-\r\n         this.setState({\r\n             chartData: {\r\n                 labels: ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'],\r\n                 datasets: [\r\n"
                },
                {
                    "date": 1681846474630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,25 +54,9 @@\n var dataNI = [];\r\n var updatedData = {};\r\n \r\n function MetropolitanAreas() {\r\n-    const metroAreas = [\r\n-        { value: \"35620\", label: \"New York, NY\" },\r\n-        { value: '31080', label: \"Los Angeles, CA\" },\r\n-        { value: \"16980\", label: \"Chicago, IL\" },\r\n-        { value: \"19100\", label: \"Dallas, TX\" },\r\n-        { value: \"37980\", label: \"Philadelphia, PA\" },\r\n-        { value: \"26420\", label: \"Houston, TX\" },\r\n-        { value: '47900', label: \"Washington, DC\" },\r\n-        { value: \"33100\", label: \"Miami, FL\" },\r\n-        { value: \"12060\", label: \"Atlanta, GA\" },\r\n-        { value: \"14460\", label: \"Boston, MA\" },\r\n-        { value: \"41860\", label: \"San Francisco, CA\" },\r\n-        { value: \"19820\", label: \"Detroit, MI\" },\r\n-        { value: \"38060\", label: \"Phoenix, AZ\" },\r\n-        { value: \"42660\", label: \"Seattle, WA\" },\r\n-        { value: \"40140\", label: \"Riverside, CA\" },\r\n-    ];\r\n+    \r\n \r\n     const ahs_attributes = [\r\n         { label: \"Household Rating\", value: \"RATINGHS\" },\r\n         { label: \"Neighborhood Rating\", value: \"RATINGNH\" },\r\n@@ -268,9 +252,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n \r\n-            <LineChartComp></LineChartComp>\r\n+            <LineChartComp chartData={this.state.chartData}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681846493449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,25 @@\n var dataNI = [];\r\n var updatedData = {};\r\n \r\n function MetropolitanAreas() {\r\n-    \r\n+    const metroAreas = [\r\n+        { value: \"35620\", label: \"New York, NY\" },\r\n+        { value: '31080', label: \"Los Angeles, CA\" },\r\n+        { value: \"16980\", label: \"Chicago, IL\" },\r\n+        { value: \"19100\", label: \"Dallas, TX\" },\r\n+        { value: \"37980\", label: \"Philadelphia, PA\" },\r\n+        { value: \"26420\", label: \"Houston, TX\" },\r\n+        { value: '47900', label: \"Washington, DC\" },\r\n+        { value: \"33100\", label: \"Miami, FL\" },\r\n+        { value: \"12060\", label: \"Atlanta, GA\" },\r\n+        { value: \"14460\", label: \"Boston, MA\" },\r\n+        { value: \"41860\", label: \"San Francisco, CA\" },\r\n+        { value: \"19820\", label: \"Detroit, MI\" },\r\n+        { value: \"38060\", label: \"Phoenix, AZ\" },\r\n+        { value: \"42660\", label: \"Seattle, WA\" },\r\n+        { value: \"40140\", label: \"Riverside, CA\" },\r\n+    ];\r\n \r\n     const ahs_attributes = [\r\n         { label: \"Household Rating\", value: \"RATINGHS\" },\r\n         { label: \"Neighborhood Rating\", value: \"RATINGNH\" },\r\n@@ -252,9 +268,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n \r\n-            <LineChartComp chartData={this.state.chartData}></LineChartComp>\r\n+            <LineChartComp></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681846502655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,9 +268,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n \r\n-            <LineChartComp></LineChartComp>\r\n+            <LineChartComp chartData={this.state.chartData}></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681846722787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,52 +4,8 @@\n import Button from 'react-bootstrap/Button'\r\n import LineChartComp from './LineChartComp';\r\n import { faker } from '@faker-js/faker';\r\n \r\n-class MetroAreas extends React.Component {\r\n-\r\n-    constructor() {\r\n-\r\n-        super();\r\n-        this.state = {\r\n-            chartData: {}\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    componentWillMount() {\r\n-        this.getChartData();\r\n-    }\r\n-\r\n-    getChartData() {\r\n-\r\n-        this.setState({\r\n-            chartData: {\r\n-                labels: ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'],\r\n-                datasets: [\r\n-                    {\r\n-                        label: \"Dataset 1\",\r\n-                        data: [5, 4, 3, 2, 1],\r\n-                        borderColor: \"rgb(255, 99, 132)\",\r\n-                        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n-                        yAxisID: \"y\"\r\n-                    },\r\n-                    {\r\n-                        label: \"Dataset 2\",\r\n-                        data: [0, 1, 2, 3, 4, 5],\r\n-                        borderColor: \"rgb(53, 162, 235)\",\r\n-                        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n-                        yAxisID: \"y1\"\r\n-                    }\r\n-                ]\r\n-            }\r\n-\r\n-        })\r\n-\r\n-    }\r\n-\r\n-}\r\n-\r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n var updatedData = {};\r\n"
                },
                {
                    "date": 1681846839330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React from 'react'\r\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import LineChartComp from './LineChartComp';\r\n+import {LineChartComp} from './LineChartComp';\r\n import { faker } from '@faker-js/faker';\r\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n"
                },
                {
                    "date": 1681846883705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n \r\n-            <LineChartComp chartData={this.state.chartData}></LineChartComp>\r\n+            <LineChartComp></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681847152598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n import React from 'react'\r\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import {LineChartComp} from './LineChartComp';\r\n-import { faker } from '@faker-js/faker';\r\n+import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend,} from 'chart.js';\r\n+import { Line } from 'react-chartjs-2';\r\n+import {faker} from '@faker-js/faker';\r\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n"
                },
                {
                    "date": 1681847191915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,74 @@\n import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend,} from 'chart.js';\r\n import { Line } from 'react-chartjs-2';\r\n import {faker} from '@faker-js/faker';\r\n \r\n+ChartJS.register(\r\n+    CategoryScale,\r\n+    LinearScale,\r\n+    PointElement,\r\n+    LineElement,\r\n+    Title,\r\n+    Tooltip,\r\n+    Legend\r\n+  );\r\n+  \r\n+  const options = {\r\n+    responsive: true,\r\n+    interaction: {\r\n+      mode: 'index',\r\n+      intersect: false,\r\n+    },\r\n+    stacked: false,\r\n+    plugins: {\r\n+      title: {\r\n+        display: true,\r\n+        text: 'Comparing Two Metropolitan Areas',\r\n+      },\r\n+    },\r\n+    scales: {\r\n+      y: {\r\n+        type: 'linear',\r\n+        display: true,\r\n+        position: 'left',\r\n+      },\r\n+      y1: {\r\n+        type: 'linear',\r\n+        display: true,\r\n+        position: 'right',\r\n+        grid: {\r\n+          drawOnChartArea: false,\r\n+        },\r\n+      },\r\n+    },\r\n+  };\r\n+  \r\n+  const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+  const data = {\r\n+    labels,\r\n+    datasets: [\r\n+      {\r\n+        label: \"Dataset 1\",\r\n+        data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n+        borderColor: \"rgb(255, 99, 132)\",\r\n+        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n+        yAxisID: \"y\"\r\n+      },\r\n+      {\r\n+        label: \"Dataset 2\",\r\n+        data: [0, 1, 2, 3, 4, 5],\r\n+        borderColor: \"rgb(53, 162, 235)\",\r\n+        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n+        yAxisID: \"y1\"\r\n+      }\r\n+    ]\r\n+  };\r\n+  \r\n+  export function LineChartComp() {\r\n+    return <Line options={options} data={data} />;\r\n+  }\r\n+  \r\n+\r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n var updatedData = {};\r\n"
                },
                {
                    "date": 1681847273884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,24 +199,9 @@\n             };\r\n \r\n             updatedData = {\r\n                 labels,\r\n-                datasets: [\r\n-                    {\r\n-                        label: \"Dataset 1\",\r\n-                        data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n-                        borderColor: \"rgb(255, 99, 132)\",\r\n-                        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n-                        yAxisID: \"y\"\r\n-                    },\r\n-                    {\r\n-                        label: \"Dataset 2\",\r\n-                        data: [1, 2, 3, 4, 5, 6],\r\n-                        borderColor: \"rgb(53, 162, 235)\",\r\n-                        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n-                        yAxisID: \"y1\"\r\n-                    }\r\n-                ]\r\n+                datasets: []\r\n             };\r\n \r\n         })\r\n     }\r\n"
                },
                {
                    "date": 1681847305077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,24 +48,9 @@\n   \r\n   const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n   const data = {\r\n     labels,\r\n-    datasets: [\r\n-      {\r\n-        label: \"Dataset 1\",\r\n-        data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n-        borderColor: \"rgb(255, 99, 132)\",\r\n-        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n-        yAxisID: \"y\"\r\n-      },\r\n-      {\r\n-        label: \"Dataset 2\",\r\n-        data: [0, 1, 2, 3, 4, 5],\r\n-        borderColor: \"rgb(53, 162, 235)\",\r\n-        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n-        yAxisID: \"y1\"\r\n-      }\r\n-    ]\r\n+    datasets: []\r\n   };\r\n   \r\n   export function LineChartComp() {\r\n     return <Line options={options} data={data} />;\r\n"
                },
                {
                    "date": 1681847341482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,13 +182,8 @@\n                     },\r\n                 ],\r\n             };\r\n \r\n-            updatedData = {\r\n-                labels,\r\n-                datasets: []\r\n-            };\r\n-\r\n         })\r\n     }\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1681847351767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,11 @@\n             }\r\n \r\n             const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n+            \r\n \r\n+\r\n             const bruh = {\r\n                 labels,\r\n                 datasets: [\r\n                     {\r\n@@ -182,8 +184,10 @@\n                     },\r\n                 ],\r\n             };\r\n \r\n+\r\n+\r\n         })\r\n     }\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1681847769853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,13 @@\n import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend,} from 'chart.js';\r\n import { Line } from 'react-chartjs-2';\r\n import {faker} from '@faker-js/faker';\r\n \r\n+const MetroAreasChart = new Line('MetroAreasChart', {\r\n+\r\n+    \r\n+\r\n+}) \r\n ChartJS.register(\r\n     CategoryScale,\r\n     LinearScale,\r\n     PointElement,\r\n@@ -154,11 +159,11 @@\n             }\r\n \r\n             const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n-            \r\n \r\n \r\n+\r\n             const bruh = {\r\n                 labels,\r\n                 datasets: [\r\n                     {\r\n"
                },
                {
                    "date": 1681847826012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,19 @@\n import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend,} from 'chart.js';\r\n import { Line } from 'react-chartjs-2';\r\n import {faker} from '@faker-js/faker';\r\n \r\n+const years = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+\r\n const MetroAreasChart = new Line('MetroAreasChart', {\r\n \r\n-    \r\n+    data: {\r\n \r\n+        labels: years,\r\n+        datasets: [],\r\n+\r\n+    }\r\n+\r\n }) \r\n ChartJS.register(\r\n     CategoryScale,\r\n     LinearScale,\r\n@@ -50,9 +57,9 @@\n       },\r\n     },\r\n   };\r\n   \r\n-  const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+  \r\n   const data = {\r\n     labels,\r\n     datasets: []\r\n   };\r\n"
                },
                {
                    "date": 1681847839900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,14 +57,8 @@\n       },\r\n     },\r\n   };\r\n   \r\n-  \r\n-  const data = {\r\n-    labels,\r\n-    datasets: []\r\n-  };\r\n-  \r\n   export function LineChartComp() {\r\n     return <Line options={options} data={data} />;\r\n   }\r\n   \r\n"
                },
                {
                    "date": 1681847895556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,13 +56,8 @@\n         },\r\n       },\r\n     },\r\n   };\r\n-  \r\n-  export function LineChartComp() {\r\n-    return <Line options={options} data={data} />;\r\n-  }\r\n-  \r\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n"
                },
                {
                    "date": 1681848128490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,10 +260,8 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n-\r\n-            <LineChartComp></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681848346440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,8 +260,9 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n+            <canvas id=\"MetroAreasChart\"></canvas>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681848557560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n import React from 'react'\r\n import { useState } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n+import Chart from 'chart.js/auto';\r\n import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend,} from 'chart.js';\r\n import { Line } from 'react-chartjs-2';\r\n import {faker} from '@faker-js/faker';\r\n \r\n const years = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n-const MetroAreasChart = new Line('MetroAreasChart', {\r\n+const MetroAreasChart = new Chart('MetroAreasChart', {\r\n \r\n     data: {\r\n \r\n         labels: years,\r\n"
                },
                {
                    "date": 1681848620492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \r\n const years = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n const MetroAreasChart = new Chart('MetroAreasChart', {\r\n-\r\n+    type: Line,\r\n     data: {\r\n \r\n         labels: years,\r\n         datasets: [],\r\n"
                },
                {
                    "date": 1681849294255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React from 'react'\r\n-import { useState } from 'react'\r\n+import { useState, useRef } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n import Chart from 'chart.js/auto';\r\n import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend,} from 'chart.js';\r\n@@ -8,18 +8,9 @@\n import {faker} from '@faker-js/faker';\r\n \r\n const years = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n-const MetroAreasChart = new Chart('MetroAreasChart', {\r\n-    type: Line,\r\n-    data: {\r\n-\r\n-        labels: years,\r\n-        datasets: [],\r\n-\r\n-    }\r\n-\r\n-}) \r\n+const chartRef = useRef(null);\r\n ChartJS.register(\r\n     CategoryScale,\r\n     LinearScale,\r\n     PointElement,\r\n"
                },
                {
                    "date": 1681849314721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import {faker} from '@faker-js/faker';\r\n \r\n const years = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n-const chartRef = useRef(null);\r\n+\r\n ChartJS.register(\r\n     CategoryScale,\r\n     LinearScale,\r\n     PointElement,\r\n@@ -55,8 +55,11 @@\n var dataNI = [];\r\n var updatedData = {};\r\n \r\n function MetropolitanAreas() {\r\n+\r\n+    const chartRef = useRef(null);\r\n+\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n         { value: '31080', label: \"Los Angeles, CA\" },\r\n         { value: \"16980\", label: \"Chicago, IL\" },\r\n"
                },
                {
                    "date": 1681849627340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n var updatedData = {};\r\n \r\n function MetropolitanAreas() {\r\n \r\n-    const chartRef = useRef(null);\r\n+    const metroAreasChartRef = useRef(null);\r\n \r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n         { value: '31080', label: \"Los Angeles, CA\" },\r\n"
                },
                {
                    "date": 1681849690185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React from 'react'\r\n-import { useState, useRef } from 'react'\r\n+import { useState, useRef, useEffect } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n import Chart from 'chart.js/auto';\r\n import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend,} from 'chart.js';\r\n@@ -58,8 +58,16 @@\n function MetropolitanAreas() {\r\n \r\n     const metroAreasChartRef = useRef(null);\r\n \r\n+    useEffect(() => {\r\n+        const chart = chartRef.current;\r\n+    \r\n+        if (chart) {\r\n+          console.log('ChartJS', chart);\r\n+        }\r\n+      }, []);\r\n+\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n         { value: '31080', label: \"Los Angeles, CA\" },\r\n         { value: \"16980\", label: \"Chicago, IL\" },\r\n"
                },
                {
                    "date": 1681849702278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n \r\n     const metroAreasChartRef = useRef(null);\r\n \r\n     useEffect(() => {\r\n-        const chart = chartRef.current;\r\n+        const chart = metroAreasChartRef.current;\r\n     \r\n         if (chart) {\r\n           console.log('ChartJS', chart);\r\n         }\r\n"
                },
                {
                    "date": 1681849759333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,9 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n-            <canvas id=\"MetroAreasChart\"></canvas>\r\n+            <Chart ref={metroAreasChartRef} type='line' data={[]}/>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681849911060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,18 +56,8 @@\n var updatedData = {};\r\n \r\n function MetropolitanAreas() {\r\n \r\n-    const metroAreasChartRef = useRef(null);\r\n-\r\n-    useEffect(() => {\r\n-        const chart = metroAreasChartRef.current;\r\n-    \r\n-        if (chart) {\r\n-          console.log('ChartJS', chart);\r\n-        }\r\n-      }, []);\r\n-\r\n     const metroAreas = [\r\n         { value: \"35620\", label: \"New York, NY\" },\r\n         { value: '31080', label: \"Los Angeles, CA\" },\r\n         { value: \"16980\", label: \"Chicago, IL\" },\r\n@@ -263,9 +253,8 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n-            <Chart ref={metroAreasChartRef} type='line' data={[]}/>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681850135867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,28 @@\n       },\r\n     },\r\n   };\r\n \r\n+  const data = {\r\n+    years,\r\n+    datasets: [\r\n+      {\r\n+        label: \"Dataset 1\",\r\n+        data: [5, 4, 3, 2, 1, 0],\r\n+        borderColor: \"rgb(255, 99, 132)\",\r\n+        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n+        yAxisID: \"y\"\r\n+      },\r\n+      {\r\n+        label: \"Dataset 2\",\r\n+        data: [0, 1, 2, 3, 4, 5],\r\n+        borderColor: \"rgb(53, 162, 235)\",\r\n+        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n+        yAxisID: \"y1\"\r\n+      }\r\n+    ]\r\n+  };\r\n+\r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n var updatedData = {};\r\n"
                },
                {
                    "date": 1681850154493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,12 @@\n       }\r\n     ]\r\n   };\r\n \r\n+  export function LineChartComp() {\r\n+    return <Line options={options} data={data} />;\r\n+  }\r\n+\r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n var updatedData = {};\r\n"
                },
                {
                    "date": 1681850163121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,8 +277,10 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n+\r\n+            <LineChartComp></LineChartComp>\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681850287408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,10 +202,13 @@\n                     },\r\n                 ],\r\n             };\r\n \r\n+            ChartJS.data = bruh;\r\n+            ChartJS.update();\r\n \r\n \r\n+\r\n         })\r\n     }\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1681850313508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,11 +172,8 @@\n             }\r\n \r\n             const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n-\r\n-\r\n-\r\n             const bruh = {\r\n                 labels,\r\n                 datasets: [\r\n                     {\r\n"
                },
                {
                    "date": 1681850323026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n import {faker} from '@faker-js/faker';\r\n \r\n const years = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n-\r\n ChartJS.register(\r\n     CategoryScale,\r\n     LinearScale,\r\n     PointElement,\r\n"
                },
                {
                    "date": 1681850361600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,10 +276,12 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n-\r\n-            <LineChartComp></LineChartComp>\r\n+            <div>\r\n+                <LineChartComp></LineChartComp>\r\n+            </div>\r\n+            \r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681850400814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,9 +276,13 @@\n                 </select>\r\n             </div>\r\n             <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n             <p>{data}</p>\r\n-            <div>\r\n+            <div style={{\r\n+                width: '600',\r\n+                hegit: \"300\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n                 <LineChartComp></LineChartComp>\r\n             </div>\r\n             \r\n         </>\r\n"
                },
                {
                    "date": 1681850520350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,13 +198,11 @@\n                     },\r\n                 ],\r\n             };\r\n \r\n-            ChartJS.data = bruh;\r\n-            ChartJS.update();\r\n+            \r\n \r\n \r\n-\r\n         })\r\n     }\r\n \r\n     return (\r\n@@ -279,9 +277,8 @@\n             <p>{data}</p>\r\n             <div style={{\r\n                 width: '600',\r\n                 hegit: \"300\",\r\n-                fontWeight: \"bold\"\r\n             }}>\r\n                 <LineChartComp></LineChartComp>\r\n             </div>\r\n             \r\n"
                },
                {
                    "date": 1681850558334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,36 +169,36 @@\n                 dataNI.push(response.data.rows[a].INDICATOR);\r\n \r\n             }\r\n \r\n-            const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+            //const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n-            const bruh = {\r\n-                labels,\r\n-                datasets: [\r\n-                    {\r\n-                        label: 'Metropolitan Area 1',\r\n-                        data: dataMetro1,\r\n-                        borderColor: 'rgb(255, 99, 132)',\r\n-                        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n-                        yAxisID: 'y',\r\n-                    },\r\n-                    {\r\n-                        label: 'Metropolitan Area 2',\r\n-                        data: dataMetro2,\r\n-                        borderColor: 'rgb(53, 162, 235)',\r\n-                        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n-                        yAxisID: 'y',\r\n-                    },\r\n-                    {\r\n-                        label: 'National Indicator',\r\n-                        data: dataNI,\r\n-                        borderColor: 'rgb(100, 162, 235)',\r\n-                        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n-                        yAxisID: 'y1',\r\n-                    },\r\n-                ],\r\n-            };\r\n+            // const bruh = {\r\n+            //     labels,\r\n+            //     datasets: [\r\n+            //         {\r\n+            //             label: 'Metropolitan Area 1',\r\n+            //             data: dataMetro1,\r\n+            //             borderColor: 'rgb(255, 99, 132)',\r\n+            //             backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n+            //             yAxisID: 'y',\r\n+            //         },\r\n+            //         {\r\n+            //             label: 'Metropolitan Area 2',\r\n+            //             data: dataMetro2,\r\n+            //             borderColor: 'rgb(53, 162, 235)',\r\n+            //             backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+            //             yAxisID: 'y',\r\n+            //         },\r\n+            //         {\r\n+            //             label: 'National Indicator',\r\n+            //             data: dataNI,\r\n+            //             borderColor: 'rgb(100, 162, 235)',\r\n+            //             backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+            //             yAxisID: 'y1',\r\n+            //         },\r\n+            //     ],\r\n+            // };\r\n \r\n             \r\n \r\n \r\n"
                },
                {
                    "date": 1681850626095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React from 'react'\r\n+import { useState, useRef, useEffect } from 'react'\r\n+import axios from 'axios'\r\n+import Button from 'react-bootstrap/Button'\r\n+import { LineChartComp } from './LineChartComp'\r\n+\r\n+var dataMetro1 = [];\r\n+var dataMetro2 = [];\r\n+var dataNI = [];\r\n+var updatedData = {};\r\n+\r\n+function MetropolitanAreas() {\r\n+\r\n+    const metroAreas = [\r\n+        { value: \"35620\", label: \"New York, NY\" },\r\n+        { value: '31080', label: \"Los Angeles, CA\" },\r\n+        { value: \"16980\", label: \"Chicago, IL\" },\r\n+        { value: \"19100\", label: \"Dallas, TX\" },\r\n+        { value: \"37980\", label: \"Philadelphia, PA\" },\r\n+        { value: \"26420\", label: \"Houston, TX\" },\r\n+        { value: '47900', label: \"Washington, DC\" },\r\n+        { value: \"33100\", label: \"Miami, FL\" },\r\n+        { value: \"12060\", label: \"Atlanta, GA\" },\r\n+        { value: \"14460\", label: \"Boston, MA\" },\r\n+        { value: \"41860\", label: \"San Francisco, CA\" },\r\n+        { value: \"19820\", label: \"Detroit, MI\" },\r\n+        { value: \"38060\", label: \"Phoenix, AZ\" },\r\n+        { value: \"42660\", label: \"Seattle, WA\" },\r\n+        { value: \"40140\", label: \"Riverside, CA\" },\r\n+    ];\r\n+\r\n+    const ahs_attributes = [\r\n+        { label: \"Household Rating\", value: \"RATINGHS\" },\r\n+        { label: \"Neighborhood Rating\", value: \"RATINGNH\" },\r\n+        { label: \"Family Income\", value: \"FINCP\" },\r\n+        { label: \"Resident's Income\", value: \"HINCP\" },\r\n+        { label: \"Resident's Age\", value: \"HHAGE\" },\r\n+        { label: 'Property Value', value: \"MARKETVAL\" },\r\n+        { label: \"Monthly Mortgage\", value: \"MORTAMT\" },\r\n+        { label: \"Monthly Rent\", value: \"RENT\" },\r\n+        { label: \"Year Built\", value: \"YRBUILT\" },\r\n+        { label: \"Unit Size\", value: \"UNITSIZE\" },\r\n+        { label: \"No Access To Water\", value: \"NOWAT\" },\r\n+        { label: \"Monthly Home Expenses\", value: \"TOTHCAMT\" },\r\n+        { label: \"Total Rooms\", value: \"TOTROOMS\" },\r\n+        { label: \"Rent Control Present\", value: \"RENTCNTRL\" },\r\n+        { label: \"Number of Inhabitants\", value: \"NUMPEOPLE\" },\r\n+    ]\r\n+\r\n+    const nat_indicators = [\r\n+        { label: \"Inflation Rate\", value: \"INFLATION\" },\r\n+        { label: \"CCI\", value: \"CCI\" },\r\n+        { label: 'Federal Interest Rate', value: \"INTRATE\" },\r\n+        { label: \"GDP\", value: \"GDP\" },\r\n+        { label: \"Employment Rate\", value: \"EMPRATE\" },\r\n+        { label: \"Bond Yield\", value: \"BONDYIELD\" },\r\n+    ]\r\n+\r\n+    const [metro1, setMetro1] = useState();\r\n+    const [metro2, setMetro2] = useState();\r\n+    const [ahsSelection, setAHSSelection] = useState();\r\n+    const [natSelection, setNatSelection] = useState();\r\n+    const [statSelection, setStatSelection] = useState();\r\n+\r\n+    const [data, setData] = useState([])\r\n+\r\n+    const getData = () => {\r\n+        const options = {\r\n+            method: 'GET',\r\n+            url: 'http://localhost:8080/MetroAreas',\r\n+            params: {\r\n+                X: ahsSelection,\r\n+                Y: natSelection,\r\n+                Z: metro1,\r\n+                H: metro2,\r\n+                statistic: statSelection\r\n+            },\r\n+        }\r\n+        console.log(options)\r\n+        axios.request(options).then((response) => {\r\n+\r\n+            console.log(response)\r\n+\r\n+            var length = response.data.rows.length\r\n+\r\n+            for (var a = 0; a < length; a++) {\r\n+\r\n+                dataMetro1.push(response.data.rows[a].V1);\r\n+\r\n+            }\r\n+\r\n+            for (var a = 0; a < length; a++) {\r\n+\r\n+                dataMetro2.push(response.data.rows[a].V2);\r\n+\r\n+            }\r\n+\r\n+            for (var a = 0; a < length; a++) {\r\n+\r\n+                dataNI.push(response.data.rows[a].INDICATOR);\r\n+\r\n+            }\r\n+\r\n+            //const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+\r\n+            // const bruh = {\r\n+            //     labels,\r\n+            //     datasets: [\r\n+            //         {\r\n+            //             label: 'Metropolitan Area 1',\r\n+            //             data: dataMetro1,\r\n+            //             borderColor: 'rgb(255, 99, 132)',\r\n+            //             backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n+            //             yAxisID: 'y',\r\n+            //         },\r\n+            //         {\r\n+            //             label: 'Metropolitan Area 2',\r\n+            //             data: dataMetro2,\r\n+            //             borderColor: 'rgb(53, 162, 235)',\r\n+            //             backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+            //             yAxisID: 'y',\r\n+            //         },\r\n+            //         {\r\n+            //             label: 'National Indicator',\r\n+            //             data: dataNI,\r\n+            //             borderColor: 'rgb(100, 162, 235)',\r\n+            //             backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+            //             yAxisID: 'y1',\r\n+            //         },\r\n+            //     ],\r\n+            // };\r\n+\r\n+            \r\n+\r\n+\r\n+        })\r\n+    }\r\n+\r\n+    return (\r\n+        <>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Please Select Metropolitan Area 1:\r\n+                <select value={metro1} onChange={e => setMetro1(e.target.value)}>\r\n+                    <option>--Select Metropolitan Area--</option>\r\n+                    {metroAreas.map(area =>\r\n+                        <option value={area.value}>{area.label}</option>\r\n+                    )};\r\n+                </select>\r\n+            </div>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Please Select Metropolitan Area 2:\r\n+                <select value={metro2} onChange={e => setMetro2(e.target.value)}>\r\n+                    <option>--Select Metropolitan Area--</option>\r\n+                    {metroAreas.map(area =>\r\n+                        <option value={area.value}>{area.label}</option>\r\n+                    )};\r\n+                </select>\r\n+            </div>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Please Select a Household Attribute:\r\n+                <select value={ahsSelection} onChange={e => setAHSSelection(e.target.value)}>\r\n+                    <option>--Select Household Attribute--</option>\r\n+                    {ahs_attributes.map(attribute =>\r\n+                        <option value={attribute.value}>{attribute.label}</option>\r\n+                    )};\r\n+                </select>\r\n+            </div>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Please Select a National Indicator:\r\n+                <select value={natSelection} onChange={e => setNatSelection(e.target.value)}>\r\n+                    <option>--Select National Indicator--</option>\r\n+                    {nat_indicators.map(indicator =>\r\n+                        <option value={indicator.value}>{indicator.label}</option>\r\n+                    )};\r\n+                </select>\r\n+            </div>\r\n+            <div style={{\r\n+                top: \"100%\",\r\n+                left: \"15%\",\r\n+                fontWeight: \"bold\"\r\n+            }}>\r\n+                Select a Statistical Measure:\r\n+                <select value={statSelection} onChange={e => setStatSelection(e.target.value)}>\r\n+                    <option>--Statistical Measure--</option>\r\n+                    <option value=\"Average\">Mean</option>\r\n+                    <option value=\"Median\">Median</option>\r\n+                    <option value='Lower Quartile'>Lower Quartile</option>\r\n+                    <option value=\"Upper Quartile\">Upper Quartile</option>\r\n+                </select>\r\n+            </div>\r\n+            <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n+            <p>{data}</p>\r\n+            <div style={{\r\n+                width: '600',\r\n+                hegit: \"300\",\r\n+            }}>\r\n+                <LineChartComp></LineChartComp>\r\n+            </div>\r\n+            \r\n+        </>\r\n+    )\r\n+}\r\n+export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681851122192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,297 +1,77 @@\n import React from 'react'\r\n import { useState, useRef, useEffect } from 'react'\r\n import axios from 'axios'\r\n import Button from 'react-bootstrap/Button'\r\n-import { LineChartComp } from './LineChartComp'\r\n \r\n-var dataMetro1 = [];\r\n-var dataMetro2 = [];\r\n-var dataNI = [];\r\n-var updatedData = {};\r\n-\r\n-function MetropolitanAreas() {\r\n-\r\n-    const metroAreas = [\r\n-        { value: \"35620\", label: \"New York, NY\" },\r\n-        { value: '31080', label: \"Los Angeles, CA\" },\r\n-        { value: \"16980\", label: \"Chicago, IL\" },\r\n-        { value: \"19100\", label: \"Dallas, TX\" },\r\n-        { value: \"37980\", label: \"Philadelphia, PA\" },\r\n-        { value: \"26420\", label: \"Houston, TX\" },\r\n-        { value: '47900', label: \"Washington, DC\" },\r\n-        { value: \"33100\", label: \"Miami, FL\" },\r\n-        { value: \"12060\", label: \"Atlanta, GA\" },\r\n-        { value: \"14460\", label: \"Boston, MA\" },\r\n-        { value: \"41860\", label: \"San Francisco, CA\" },\r\n-        { value: \"19820\", label: \"Detroit, MI\" },\r\n-        { value: \"38060\", label: \"Phoenix, AZ\" },\r\n-        { value: \"42660\", label: \"Seattle, WA\" },\r\n-        { value: \"40140\", label: \"Riverside, CA\" },\r\n-    ];\r\n-\r\n-    const ahs_attributes = [\r\n-        { label: \"Household Rating\", value: \"RATINGHS\" },\r\n-        { label: \"Neighborhood Rating\", value: \"RATINGNH\" },\r\n-        { label: \"Family Income\", value: \"FINCP\" },\r\n-        { label: \"Resident's Income\", value: \"HINCP\" },\r\n-        { label: \"Resident's Age\", value: \"HHAGE\" },\r\n-        { label: 'Property Value', value: \"MARKETVAL\" },\r\n-        { label: \"Monthly Mortgage\", value: \"MORTAMT\" },\r\n-        { label: \"Monthly Rent\", value: \"RENT\" },\r\n-        { label: \"Year Built\", value: \"YRBUILT\" },\r\n-        { label: \"Unit Size\", value: \"UNITSIZE\" },\r\n-        { label: \"No Access To Water\", value: \"NOWAT\" },\r\n-        { label: \"Monthly Home Expenses\", value: \"TOTHCAMT\" },\r\n-        { label: \"Total Rooms\", value: \"TOTROOMS\" },\r\n-        { label: \"Rent Control Present\", value: \"RENTCNTRL\" },\r\n-        { label: \"Number of Inhabitants\", value: \"NUMPEOPLE\" },\r\n-    ]\r\n-\r\n-    const nat_indicators = [\r\n-        { label: \"Inflation Rate\", value: \"INFLATION\" },\r\n-        { label: \"CCI\", value: \"CCI\" },\r\n-        { label: 'Federal Interest Rate', value: \"INTRATE\" },\r\n-        { label: \"GDP\", value: \"GDP\" },\r\n-        { label: \"Employment Rate\", value: \"EMPRATE\" },\r\n-        { label: \"Bond Yield\", value: \"BONDYIELD\" },\r\n-    ]\r\n-\r\n-    const [metro1, setMetro1] = useState();\r\n-    const [metro2, setMetro2] = useState();\r\n-    const [ahsSelection, setAHSSelection] = useState();\r\n-    const [natSelection, setNatSelection] = useState();\r\n-    const [statSelection, setStatSelection] = useState();\r\n-\r\n-    const [data, setData] = useState([])\r\n-\r\n-    const getData = () => {\r\n-        const options = {\r\n-            method: 'GET',\r\n-            url: 'http://localhost:8080/MetroAreas',\r\n-            params: {\r\n-                X: ahsSelection,\r\n-                Y: natSelection,\r\n-                Z: metro1,\r\n-                H: metro2,\r\n-                statistic: statSelection\r\n-            },\r\n-        }\r\n-        console.log(options)\r\n-        axios.request(options).then((response) => {\r\n-\r\n-            console.log(response)\r\n-\r\n-            var length = response.data.rows.length\r\n-\r\n-            for (var a = 0; a < length; a++) {\r\n-\r\n-                dataMetro1.push(response.data.rows[a].V1);\r\n-\r\n-            }\r\n-\r\n-            for (var a = 0; a < length; a++) {\r\n-\r\n-                dataMetro2.push(response.data.rows[a].V2);\r\n-\r\n-            }\r\n-\r\n-            for (var a = 0; a < length; a++) {\r\n-\r\n-                dataNI.push(response.data.rows[a].INDICATOR);\r\n-\r\n-            }\r\n-\r\n-            //const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n-\r\n-            // const bruh = {\r\n-            //     labels,\r\n-            //     datasets: [\r\n-            //         {\r\n-            //             label: 'Metropolitan Area 1',\r\n-            //             data: dataMetro1,\r\n-            //             borderColor: 'rgb(255, 99, 132)',\r\n-            //             backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n-            //             yAxisID: 'y',\r\n-            //         },\r\n-            //         {\r\n-            //             label: 'Metropolitan Area 2',\r\n-            //             data: dataMetro2,\r\n-            //             borderColor: 'rgb(53, 162, 235)',\r\n-            //             backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n-            //             yAxisID: 'y',\r\n-            //         },\r\n-            //         {\r\n-            //             label: 'National Indicator',\r\n-            //             data: dataNI,\r\n-            //             borderColor: 'rgb(100, 162, 235)',\r\n-            //             backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n-            //             yAxisID: 'y1',\r\n-            //         },\r\n-            //     ],\r\n-            // };\r\n-\r\n-            \r\n-\r\n-\r\n-        })\r\n-    }\r\n-\r\n-    return (\r\n-        <>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Please Select Metropolitan Area 1:\r\n-                <select value={metro1} onChange={e => setMetro1(e.target.value)}>\r\n-                    <option>--Select Metropolitan Area--</option>\r\n-                    {metroAreas.map(area =>\r\n-                        <option value={area.value}>{area.label}</option>\r\n-                    )};\r\n-                </select>\r\n-            </div>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Please Select Metropolitan Area 2:\r\n-                <select value={metro2} onChange={e => setMetro2(e.target.value)}>\r\n-                    <option>--Select Metropolitan Area--</option>\r\n-                    {metroAreas.map(area =>\r\n-                        <option value={area.value}>{area.label}</option>\r\n-                    )};\r\n-                </select>\r\n-            </div>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Please Select a Household Attribute:\r\n-                <select value={ahsSelection} onChange={e => setAHSSelection(e.target.value)}>\r\n-                    <option>--Select Household Attribute--</option>\r\n-                    {ahs_attributes.map(attribute =>\r\n-                        <option value={attribute.value}>{attribute.label}</option>\r\n-                    )};\r\n-                </select>\r\n-            </div>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Please Select a National Indicator:\r\n-                <select value={natSelection} onChange={e => setNatSelection(e.target.value)}>\r\n-                    <option>--Select National Indicator--</option>\r\n-                    {nat_indicators.map(indicator =>\r\n-                        <option value={indicator.value}>{indicator.label}</option>\r\n-                    )};\r\n-                </select>\r\n-            </div>\r\n-            <div style={{\r\n-                top: \"100%\",\r\n-                left: \"15%\",\r\n-                fontWeight: \"bold\"\r\n-            }}>\r\n-                Select a Statistical Measure:\r\n-                <select value={statSelection} onChange={e => setStatSelection(e.target.value)}>\r\n-                    <option>--Statistical Measure--</option>\r\n-                    <option value=\"Average\">Mean</option>\r\n-                    <option value=\"Median\">Median</option>\r\n-                    <option value='Lower Quartile'>Lower Quartile</option>\r\n-                    <option value=\"Upper Quartile\">Upper Quartile</option>\r\n-                </select>\r\n-            </div>\r\n-            <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n-            <p>{data}</p>\r\n-            <div style={{\r\n-                width: '600',\r\n-                hegit: \"300\",\r\n-            }}>\r\n-                <LineChartComp></LineChartComp>\r\n-            </div>\r\n-            \r\n-        </>\r\n-    )\r\n-}\r\n-export default MetropolitanAreas\n-import React from 'react'\r\n-import { useState, useRef, useEffect } from 'react'\r\n-import axios from 'axios'\r\n-import Button from 'react-bootstrap/Button'\r\n-import Chart from 'chart.js/auto';\r\n-import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend,} from 'chart.js';\r\n+import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, } from 'chart.js';\r\n import { Line } from 'react-chartjs-2';\r\n-import {faker} from '@faker-js/faker';\r\n+import { faker } from '@faker-js/faker';\r\n \r\n-const years = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n-\r\n ChartJS.register(\r\n     CategoryScale,\r\n     LinearScale,\r\n     PointElement,\r\n     LineElement,\r\n     Title,\r\n     Tooltip,\r\n     Legend\r\n-  );\r\n-  \r\n-  const options = {\r\n+);\r\n+\r\n+const options = {\r\n     responsive: true,\r\n     interaction: {\r\n-      mode: 'index',\r\n-      intersect: false,\r\n+        mode: 'index',\r\n+        intersect: false,\r\n     },\r\n     stacked: false,\r\n     plugins: {\r\n-      title: {\r\n-        display: true,\r\n-        text: 'Comparing Two Metropolitan Areas',\r\n-      },\r\n+        title: {\r\n+            display: true,\r\n+            text: 'Comparing Two Metropolitan Areas',\r\n+        },\r\n     },\r\n     scales: {\r\n-      y: {\r\n-        type: 'linear',\r\n-        display: true,\r\n-        position: 'left',\r\n-      },\r\n-      y1: {\r\n-        type: 'linear',\r\n-        display: true,\r\n-        position: 'right',\r\n-        grid: {\r\n-          drawOnChartArea: false,\r\n+        y: {\r\n+            type: 'linear',\r\n+            display: true,\r\n+            position: 'left',\r\n         },\r\n-      },\r\n+        y1: {\r\n+            type: 'linear',\r\n+            display: true,\r\n+            position: 'right',\r\n+            grid: {\r\n+                drawOnChartArea: false,\r\n+            },\r\n+        },\r\n     },\r\n-  };\r\n+};\r\n \r\n-  const data = {\r\n-    years,\r\n+const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+const data = {\r\n+    labels,\r\n     datasets: [\r\n-      {\r\n-        label: \"Dataset 1\",\r\n-        data: [5, 4, 3, 2, 1, 0],\r\n-        borderColor: \"rgb(255, 99, 132)\",\r\n-        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n-        yAxisID: \"y\"\r\n-      },\r\n-      {\r\n-        label: \"Dataset 2\",\r\n-        data: [0, 1, 2, 3, 4, 5],\r\n-        borderColor: \"rgb(53, 162, 235)\",\r\n-        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n-        yAxisID: \"y1\"\r\n-      }\r\n+        {\r\n+            label: \"Dataset 1\",\r\n+            data: labels.map(() => faker.datatype.number({ min: 0, max: 10 })),\r\n+            borderColor: \"rgb(255, 99, 132)\",\r\n+            backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n+            yAxisID: \"y\"\r\n+        },\r\n+        {\r\n+            label: \"Dataset 2\",\r\n+            data: [0, 1, 2, 3, 4, 5],\r\n+            borderColor: \"rgb(53, 162, 235)\",\r\n+            backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n+            yAxisID: \"y1\"\r\n+        }\r\n     ]\r\n-  };\r\n+};\r\n \r\n-  export function LineChartComp() {\r\n+export function LineChartComp() {\r\n     return <Line options={options} data={data} />;\r\n-  }\r\n+}\r\n \r\n var dataMetro1 = [];\r\n var dataMetro2 = [];\r\n var dataNI = [];\r\n@@ -417,11 +197,11 @@\n             //         },\r\n             //     ],\r\n             // };\r\n \r\n-            \r\n \r\n \r\n+\r\n         })\r\n     }\r\n \r\n     return (\r\n@@ -499,9 +279,9 @@\n                 hegit: \"300\",\r\n             }}>\r\n                 <LineChartComp></LineChartComp>\r\n             </div>\r\n-            \r\n+\r\n         </>\r\n     )\r\n }\r\n export default MetropolitanAreas\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681851243915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n                 dataNI.push(response.data.rows[a].INDICATOR);\r\n \r\n             }\r\n \r\n-            //const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n+            const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n             // const bruh = {\r\n             //     labels,\r\n             //     datasets: [\r\n"
                },
                {
                    "date": 1681851291979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,11 +197,8 @@\n             //         },\r\n             //     ],\r\n             // };\r\n \r\n-\r\n-\r\n-\r\n         })\r\n     }\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1681851302840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,34 +170,34 @@\n             }\r\n \r\n             const labels = ['2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021'];\r\n \r\n-            // const bruh = {\r\n-            //     labels,\r\n-            //     datasets: [\r\n-            //         {\r\n-            //             label: 'Metropolitan Area 1',\r\n-            //             data: dataMetro1,\r\n-            //             borderColor: 'rgb(255, 99, 132)',\r\n-            //             backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n-            //             yAxisID: 'y',\r\n-            //         },\r\n-            //         {\r\n-            //             label: 'Metropolitan Area 2',\r\n-            //             data: dataMetro2,\r\n-            //             borderColor: 'rgb(53, 162, 235)',\r\n-            //             backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n-            //             yAxisID: 'y',\r\n-            //         },\r\n-            //         {\r\n-            //             label: 'National Indicator',\r\n-            //             data: dataNI,\r\n-            //             borderColor: 'rgb(100, 162, 235)',\r\n-            //             backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n-            //             yAxisID: 'y1',\r\n-            //         },\r\n-            //     ],\r\n-            // };\r\n+            const bruh = {\r\n+                labels,\r\n+                datasets: [\r\n+                    {\r\n+                        label: 'Metropolitan Area 1',\r\n+                        data: dataMetro1,\r\n+                        borderColor: 'rgb(255, 99, 132)',\r\n+                        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n+                        yAxisID: 'y',\r\n+                    },\r\n+                    {\r\n+                        label: 'Metropolitan Area 2',\r\n+                        data: dataMetro2,\r\n+                        borderColor: 'rgb(53, 162, 235)',\r\n+                        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+                        yAxisID: 'y',\r\n+                    },\r\n+                    {\r\n+                        label: 'National Indicator',\r\n+                        data: dataNI,\r\n+                        borderColor: 'rgb(100, 162, 235)',\r\n+                        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n+                        yAxisID: 'y1',\r\n+                    },\r\n+                ],\r\n+            };\r\n \r\n         })\r\n     }\r\n \r\n"
                },
                {
                    "date": 1681851334262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,8 +197,11 @@\n                     },\r\n                 ],\r\n             };\r\n \r\n+            ChartJS.data = bruh;\r\n+            ChartJS.update();\r\n+\r\n         })\r\n     }\r\n \r\n     return (\r\n"
                }
            ],
            "date": 1681839611237,
            "name": "Commit-0",
            "content": "import { useState } from 'react'\r\nimport axios from 'axios'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n\r\n\r\nfunction MetropolitanAreas() {\r\n    const metroAreas = [\r\n        { value: \"35620\", label: \"New York, NY\" },\r\n        { value: '31080', label: \"Los Angeles, CA\" },\r\n        { value: \"16980\", label: \"Chicago, IL\" },\r\n        { value: \"19100\", label: \"Dallas, TX\" },\r\n        { value: \"37980\", label: \"Philadelphia, PA\" },\r\n        { value: \"26420\", label: \"Houston, TX\" },\r\n        { value: '47900', label: \"Washington, DC\" },\r\n        { value: \"33100\", label: \"Miami, FL\" },\r\n        { value: \"12060\", label: \"Atlanta, GA\" },\r\n        { value: \"14460\", label: \"Boston, MA\" },\r\n        { value: \"41860\", label: \"San Francisco, CA\" },\r\n        { value: \"19820\", label: \"Detroit, MI\" },\r\n        { value: \"38060\", label: \"Phoenix, AZ\" },\r\n        { value: \"42660\", label: \"Seattle, WA\" },\r\n        { value: \"40140\", label: \"Riverside, CA\" },\r\n    ];\r\n\r\n    const ahs_attributes = [\r\n        { label: \"Household Rating\", value: \"RATINGHS\" },\r\n        { label: \"Neighborhood Rating\", value: \"RATINGNH\" },\r\n        { label: \"Family Income\", value: \"FINCP\" },\r\n        { label: \"Resident's Income\", value: \"HINCP\" },\r\n        { label: \"Resident's Age\", value: \"HHAGE\" },\r\n        { label: 'Property Value', value: \"MARKETVAL\" },\r\n        { label: \"Monthly Mortgage\", value: \"MORTAMT\" },\r\n        { label: \"Monthly Rent\", value: \"RENT\" },\r\n        { label: \"Year Built\", value: \"YRBUILT\" },\r\n        { label: \"Unit Size\", value: \"UNITSIZE\" },\r\n        { label: \"No Access To Water\", value: \"NOWAT\" },\r\n        { label: \"Monthly Home Expenses\", value: \"TOTHCAMT\" },\r\n        { label: \"Total Rooms\", value: \"TOTROOMS\" },\r\n        { label: \"Rent Control Present\", value: \"RENTCNTRL\" },\r\n        { label: \"Number of Inhabitants\", value: \"NUMPEOPLE\" },\r\n    ]\r\n\r\n    const nat_indicators = [\r\n        { label: \"Inflation Rate\", value: \"INFLATION\" },\r\n        { label: \"CCI\", value: \"CCI\" },\r\n        { label: 'Federal Interest Rate', value: \"INTRATE\" },\r\n        { label: \"GDP\", value: \"GDP\" },\r\n        { label: \"Employment Rate\", value: \"EMPRATE\" },\r\n        { label: \"Bond Yield\", value: \"BONDYIELD\" },\r\n    ]\r\n\r\n    const [metro1, setMetro1] = useState();\r\n    const [metro2, setMetro2] = useState();\r\n    const [ahsSelection, setAHSSelection] = useState();\r\n    const [natSelection, setNatSelection] = useState();\r\n    const [statSelection, setStatSelection] = useState();\r\n\r\n    const [data, setData] = useState([])\r\n\r\n    const getData = () => {\r\n        const options = {\r\n            method: 'GET',\r\n            url: 'http://localhost:8080/MetroAreas',\r\n            params: {\r\n                X: ahsSelection,\r\n                Y: natSelection,\r\n                Z: metro1,\r\n                H: metro2,\r\n                statistic: statSelection\r\n            },\r\n        }\r\n        console.log(options)\r\n        axios.request(options).then((response) => {\r\n\r\n            console.log(response)\r\n\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                top: \"100%\",\r\n                left: \"15%\",\r\n                fontWeight: \"bold\"\r\n            }}>\r\n                Please Select Metropolitan Area 1:\r\n                <select value={metro1} onChange={e => setMetro1(e.target.value)}>\r\n                    <option>--Select Metropolitan Area--</option>\r\n                    {metroAreas.map(area =>\r\n                      <option value={area.value}>{area.label}</option>\r\n                    )};\r\n                </select>\r\n            </div>\r\n            <div style={{\r\n                top: \"100%\",\r\n                left: \"15%\",\r\n                fontWeight: \"bold\"\r\n            }}>\r\n                Please Select Metropolitan Area 2:\r\n                <select value={metro2} onChange={e => setMetro2(e.target.value)}>\r\n                    <option>--Select Metropolitan Area--</option>\r\n                    {metroAreas.map(area =>\r\n                        <option value={area.value}>{area.label}</option>\r\n                    )};\r\n                </select>\r\n            </div>\r\n            <div style={{\r\n                top: \"100%\",\r\n                left: \"15%\",\r\n                fontWeight: \"bold\"\r\n            }}>\r\n                Please Select a Household Attribute:\r\n                <select value={ahsSelection} onChange={e => setAHSSelection(e.target.value)}>\r\n                    <option>--Select Household Attribute--</option>\r\n                    {ahs_attributes.map(attribute =>\r\n                        <option value={attribute.value}>{attribute.label}</option>\r\n                    )};\r\n                </select>\r\n            </div>\r\n            <div style={{\r\n                top: \"100%\",\r\n                left: \"15%\",\r\n                fontWeight: \"bold\"\r\n            }}>\r\n                Please Select a National Indicator:\r\n                <select value={natSelection} onChange={e => setNatSelection(e.target.value)}>\r\n                    <option>--Select National Indicator--</option>\r\n                    {nat_indicators.map(indicator =>\r\n                        <option value={indicator.value}>{indicator.label}</option>\r\n                    )};\r\n                </select>\r\n            </div>\r\n            <div style={{\r\n                top: \"100%\",\r\n                left: \"15%\",\r\n                fontWeight: \"bold\"\r\n            }}>\r\n                Select a Statistical Measure:\r\n                <select value={statSelection} onChange={e => setStatSelection(e.target.value)}>\r\n                    <option>--Statistical Measure--</option>\r\n                    <option value=\"Average\">Mean</option>\r\n                    <option value=\"Median\">Median</option>\r\n                    <option value='Lower Quartile'>Lower Quartile</option>\r\n                    <option value=\"Upper Quartile\">Upper Quartile</option>\r\n                </select>\r\n            </div>\r\n            <Button variant=\"secondary\" onClick={getData}>Search</Button>\r\n            <p>{data}</p>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default MetropolitanAreas"
        }
    ]
}